[{"title":"Git 配置与介绍","url":"/2021/03/07/Git-%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BB%8B%E7%BB%8D/","content":"Github一、安装配置\n安装 \n访问网址 Git-download\nlinux Git-linux\n # yum install git (up to Fedora 21)\n # dnf install git(Fedora 22 and later)\n\n\n\n\n配置\n第一次使用需要进行用户配置\n# git config --global user.name &quot;username&quot;(不支持中文)\n# git config --global user.email &quot;useremail&quot;\n查看配置结果# git config --list\n\n\n\n\n\n二、认识Git\ngit记录的是什么\n\n\n![431e79f8.png]传统的版本控制器如svn工作原理，则是记录文件的每次改动\n\n\n\n\n![6c92b049.png]Git则是每个版本都保存一次，形成一个分支\n普通的程序员是把很多时间放在写代码和调bug上，而优秀的程序员是将更多的经历放在设计上。\n\n\n\ngit的工作流程\n\ngit流程\n本地：在工作目录中添加、修改文件\n暂存区-本地：将需要进行版本管理的文件放入暂存区\n提交：将暂存区的文件提交到Git仓库\n\n\ngit管理文件的三种状态\n已修改 (modified)\n已暂存 (staged)\n已提交 (committed)\n\n\n\n\n![8f8a0fbb.png]\n\n\n\n三、使用\nGit -生成 -添加 -提交\n\n# git init即可在当前项目中生成一个.git目录\n# git add README.md 文件添加到暂存区(本地必须存在该文件)。文件编码：utf-8notBOM\n# git commit -m &quot;add a readme file&quot;提交文件到仓库，””中为本次提交说明信息[1]\n# git log 查看历史提交记录,从近到远排序，commit后为提交的唯一hashId Author提交作者，Date提交时间，以及提交说明 \n\n\nGit -查看状态\n\n# git status 查看git状态，出现的提示[2]\n文件的两种状态[3]\n\n\nGit -取消暂存\n\n# git reset HEAD &lt;file&gt;... 取消还未提交文件的暂存状态，不指定文件则将当前所有暂存状态文件全部取消暂存状态\n\n\n\n\nGit -取消修改\n\n[!] # git checkout -- &lt;file&gt; 将仓库最近一次提交的file覆盖本地file\n\n\nGit -查看历史记录\n\n# git reflog 查看git历史记录\n\n\n\n四、Git -reset![5d67d3bb.png]\n\nGIT -reset\n# git reset HEAD &lt;file&gt;... \n取消还未提交文件的暂存状态，不指定文件则将当前所有暂存状态文件全部取消暂存状态\n仅对暂存区文件有效\n\n\n# git reset --mixed HEAD~\n--mixed默认指令，不加也可\n移动HEAD[4]的指向，将其指向指定的快照[5]\n将HEAD(指针)移动后指向的快照 回滚到暂存区，工作目录不受影响\n\n\n# git reset --soft HEAD~\n--soft软回滚\n移动HEAD的指向，将其指向上一个快照\n将指定版本的提交，回滚到暂存区，相当于撤销指定版本的一次提交\n\n\n# git reset --hard HEAD~\n--hard强制回滚\n移动HEAD的指向，将其指向指定的快照\n将HEAD指向的快照回滚到暂存区，同时将暂存区的文件还原到工作目录\n相当于本地、暂存区完全回滚到指定快照(版本)\n**会覆盖本地文件，删除版本中没有文的件**\n\n\n\n\nGit -回滚指定快照\n~ 可换成指定Hashid，一般输入Hashid不少于5位即可识别\n# git reset Hashid,只要知道某版本的Hashid，就可以回滚到暂存区，如果加上--hard,就会直接回滚到工作目录中\n\n\nGit -回滚个别文件\n# git reset 版本快照 文件名/路径因为没有HEAD指令，所以不会移动HEAD   \n\n\n\n\n1.如果提交无误，则会返回【create mode 100644 readme.md】,其中100表示文件为普通文件，644表示权限 ↩2.'on branch master' 表示处于一个分支上；'Untracked files'表示下面红色的文件/文件夹是没有添加到暂存区的；'changes to be committed'表示新添加到暂存区的文件 ↩3.当一个文件已经被添加到暂存区(HEAD)后，这时再修改该文件，# git status就会看到该文件的两种状态，一个未提交到仓库(绿色)，一个未添加到暂存区。 ↩4.这里的HEAD表示指针，表示指向某个分支。HEAD~表示指向上一个分支，并覆盖本地文件HEAD~~表示回退2个版本，也可使用HREAD~2表示 ↩5.版本 ↩5.每一个版本称为一个快照 ↩","categories":["Git"]},{"title":"MySQL常见的三种存储引擎（InnoDB、MyISAM、MEMORY）","url":"/2021/03/07/MySQL%E5%B8%B8%E8%A7%81%E7%9A%84%E4%B8%89%E7%A7%8D%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E%EF%BC%88InnoDB%E3%80%81MyISAM%E3%80%81MEMORY%EF%BC%89/","content":"\n\n转载：MySQL常见的三种存储引擎（InnoDB、MyISAM、MEMORY） |博客园 my笔触作者：于果\n\nMySQL是我们经常使用的数据库处理系统（DBMS），不知小伙伴们有没有注意过其中的“存储引擎”（storage_engine）呢？有时候面试题中也会问道MySQL几种常用的存储引擎的区别。这次就简短侃一下存储引擎那些事儿。\n\n\n引擎（Engine）是电子平台上开发程序或系统的核心组件。利用引擎，开发者可迅速建立、铺设程序所需的功能，或利用其辅助程序的运转。一般而言，引擎是一个程序或一套系统的支持部分。常见的程序引擎有游戏引擎，搜索引擎，杀毒引擎等。\n\nOk，我们知道了，引擎就是一个程序的核心组件。\n简单来说，存储引擎就是指表的类型以及表在计算机上的存储方式。\n存储引擎的概念是MySQL的特点，Oracle中没有专门的存储引擎的概念，Oracle有OLTP和OLAP模式的区分。不同的存储引擎决定了MySQL数据库中的表可以用不同的方式来存储。我们可以根据数据的特点来选择不同的存储引擎。\n在MySQL中的存储引擎有很多种，可以通过“SHOW ENGINES”语句来查看。下面重点关注InnoDB、MyISAM、MEMORY这三种。\n一.InnoDB存储引擎\nInnoDB给MySQL的表提供了事务处理、回滚、崩溃修复能力和多版本并发控制的事务安全。在MySQL从3.23.34a开始包含InnnoDB。它是MySQL上第一个提供外键约束的表引擎。而且InnoDB对事务处理的能力，也是其他存储引擎不能比拟的。靠后版本的MySQL的默认存储引擎就是InnoDB。\nInnoDB存储引擎总支持AUTO_INCREMENT。自动增长列的值不能为空，并且值必须唯一。MySQL中规定自增列必须为主键。在插入值的时候，如果自动增长列不输入值，则插入的值为自动增长后的值；如果输入的值为0或空（NULL），则插入的值也是自动增长后的值；如果插入某个确定的值，且该值在前面没有出现过，就可以直接插入。\nInnoDB还支持外键（FOREIGN KEY）。外键所在的表叫做子表，外键所依赖（REFERENCES）的表叫做父表。父表中被字表外键关联的字段必须为主键。当删除、更新父表中的某条信息时，子表也必须有相应的改变，这是数据库的参照完整性规则。\nInnoDB中，创建的表的表结构存储在_.frm_文件中（我觉得是frame的缩写吧）。数据和索引存储在innodb_data_home_dir和innodb_data_file_path定义的表空间中。\nInnoDB的优势在于提供了良好的事务处理、崩溃修复能力和并发控制。缺点是读写效率较差，占用的数据空间相对较大。\n二.MyISAM存储引擎\nMyISAM是MySQL中常见的存储引擎，曾经是MySQL的默认存储引擎。MyISAM是基于ISAM引擎发展起来的，增加了许多有用的扩展。\nMyISAM的表存储成3个文件。文件的名字与表名相同。拓展名为_frm、MYD、MYI_。其实，frm文件存储表的结构；MYD文件存储数据，是MYData的缩写；MYI文件存储索引，是MYIndex的缩写。\n基于MyISAM存储引擎的表支持3种不同的存储格式。包括静态型、动态型和压缩型。其中，静态型是MyISAM的默认存储格式，它的字段是固定长度的；动态型包含变长字段，记录的长度不是固定的；压缩型需要用到myisampack工具，占用的磁盘空间较小。\nMyISAM的优势在于占用空间小，处理速度快。缺点是不支持事务的完整性和并发性。\n三.MEMORY存储引擎\nMEMORY是MySQL中一类特殊的存储引擎。它使用存储在内存中的内容来创建表，而且数据全部放在内存中。这些特性与前面的两个很不同。\n每个基于MEMORY存储引擎的表实际对应一个磁盘文件。该文件的文件名与表名相同，类型为_frm_类型。该文件中只存储表的结构。而其数据文件，都是存储在内存中，这样有利于数据的快速处理，提高整个表的效率。值得注意的是，服务器需要有足够的内存来维持MEMORY存储引擎的表的使用。如果不需要了，可以释放内存，甚至删除不需要的表。\nMEMORY默认使用哈希索引。速度比使用B型树索引快。当然如果你想用B型树索引，可以在创建索引时指定。\n注意，MEMORY用到的很少，因为它是把数据存到内存中，如果内存出现异常就会影响数据。如果重启或者关机，所有数据都会消失。因此，基于MEMORY的表的生命周期很短，一般是一次性的。\n四.怎样选择存储引擎\n在实际工作中，选择一个合适的存储引擎是一个比较复杂的问题。每种存储引擎都有自己的优缺点，不能笼统地说谁比谁好。\n\nInnoDB：支持事务处理，支持外键，支持崩溃修复能力和并发控制。如果需要对事务的完整性要求比较高（比如银行），要求实现并发控制（比如售票），那选择InnoDB有很大的优势。如果需要频繁的更新、删除操作的数据库，也可以选择InnoDB，因为支持事务的提交（commit）和回滚（rollback）。\nMyISAM：插入数据快，空间和内存使用比较低。如果表主要是用于插入新记录和读出记录，那么选择MyISAM能实现处理高效率。如果应用的完整性、并发性要求比 较低，也可以使用。\nMEMORY：所有的数据都在内存中，数据的处理速度快，但是安全性不高。如果需要很快的读写速度，对数据的安全性要求较低，可以选择MEMOEY。它对表的大小有要求，不能建立太大的表。所以，这类数据库只使用在相对较小的数据库表。\n注意，同一个数据库也可以使用多种存储引擎的表。如果一个表要求比较高的事务处理，可以选择InnoDB。这个数据库中可以将查询要求比较高的表选择MyISAM存储。如果该数据库需要一个用于查询的临时表，可以选择MEMORY存储引擎。\n__EOF__","categories":["MySql"]},{"title":"Playwright","url":"/2021/03/07/Playwright/","content":"\n转载：微软开源最强Python自动化神器Playwright！不用写一行代码！作者：Python数据科学\n\n相信玩过爬虫的朋友都知道selenium，一个自动化测试的神器工具。写个Python自动化脚本解放双手基本上是常规的操作了，爬虫爬不了的，就用自动化测试凑一凑。\n虽然selenium有完备的文档，但也需要一定的学习成本，对于一个纯小白来讲还是有些门槛的。\n最近，微软开源了一个项目叫「playwright-python」，简直碉堡了！这个项目是针对Python语言的纯自动化工具，连代码都不用写，就能实现自动化功能。\n\n可能你会觉得有点不可思议，但它就是这么厉害。下面我们一起看下这个神器。\n1. Playwright介绍Playwright是一个强大的Python库，仅用一个API即可自动执行 Chromium、Firefox、WebKit等主流浏览器自动化操作，并同时支持以无头模式、有头模式运行。\nPlaywright提供的自动化技术是绿色的、功能强大、可靠且快速，支持Linux、Mac以及Windows操作系统。\n2.Playwright使用安装Playwright的安装非常简单，两步走。\n# 安装playwright库pip install playwright# 安装浏览器驱动文件（安装过程稍微有点慢）python -m playwright install\n上面两个pip操作分别安装：\n\n安装Playwright依赖库，需要Python3.7+\n安装Chromium、Firefox、WebKit等浏览器的驱动文件\n\n录制使用 Playwright 无需写一行代码，我们只需手动操作浏览器，它会录制我们的操作，然后自动生成代码脚本。\n下面就是录制的命令codegen，仅仅一行。\n# 命令行键入 --help 可看到所有选项python -m playwright codegen\ncodegen 的用法可以使用 --help 查看，如果简单使用就是直接在命令后面加上url链接，如果有其他需要可以添加options。\npython -m playwright codegen --helpUsage: index codegen [options] [url]open page and generate code for user actionsOptions:  -o, --output &lt;file name&gt;  saves the generated script to a file  --target &lt;language&gt;       language to use, one of javascript, python, python-async, csharp (default: &quot;python&quot;)  -h, --help                display help for commandExamples:  $ codegen  $ codegen --target=python  $ -b webkit codegen https://example.com\noptions含义：\n-o：将录制的脚本保存到一个文件\n\n–target：规定生成脚本的语言，有JS和Python两种，默认为Python\n\n-b：指定浏览器驱动\n\n比如，我要在 baidu.com 搜索，用chromium驱动，将结果保存为my.py的python文件。\npython -m playwright codegen --target python -o &#39;my.py&#39; -b chromium https://www.baid\n命令行输入后会自动打开浏览器，然后可以看见在浏览器上的一举一动都会被自动翻译成代码，如下所示。结束后自动关闭浏览器，保存生成的自动化脚本到py文件。\nfrom playwright import sync_playwrightdef run(playwright):    browser = playwright.chromium.launch(headless=False)    context = browser.newContext()    # Open new page    page = context.newPage()    page.goto(&quot;https://www.baidu.com/&quot;)    page.click(&quot;input[name=\\&quot;wd\\&quot;]&quot;)    page.fill(&quot;input[name=\\&quot;wd\\&quot;]&quot;, &quot;jingdong&quot;)    page.click(&quot;text=\\&quot;京东\\&quot;&quot;)      # Click //a[normalize-space(.)=&#x27;京东JD.COM官网 多快好省 只为品质生活&#x27;]    with page.expect_navigation():        with page.expect_popup() as popup_info:            page.click(&quot;//a[normalize-space(.)=&#x27;京东JD.COM官网 多快好省 只为品质生活&#x27;]&quot;)        page1 = popup_info.value    # ---------------------    context.close()    browser.close()with sync_playwright() as playwright:    run(playwright)\n\n此外，playwright还提供了同步和异步的API接口，文档如下。\n\n链接：https://microsoft.github.io/playwright-python/index.html\n\n同步下面示例代码：依次打开三个浏览器，前往baidu搜索，截图后退出。\nfrom playwright import sync_playwrightwith sync_playwright() as p:    for browser_type in [p.chromium, p.firefox, p.webkit]:        browser = browser_type.launch()        page = browser.newPage()        page.goto(&#x27;https://baidu.com/&#x27;)        page.screenshot(path=f&#x27;example-&#123;browser_type.name&#125;.png&#x27;)        browser.close()\n\n异步异步操作可结合asyncio同时进行三个浏览器操作。\nimport asynciofrom playwright import async_playwrightasync def main():    async with async_playwright() as p:        for browser_type in [p.chromium, p.firefox, p.webkit]:            browser = await browser_type.launch()            page = await browser.newPage()            await page.goto(&#x27;http://baidu.com/&#x27;)            await page.screenshot(path=f&#x27;example-&#123;browser_type.name&#125;.png&#x27;)            await browser.close()asyncio.get_event_loop().run_until_complete(main())\n\n移动端更厉害的是，playwright还可支持移动端的浏览器模拟。下面是官方文档提供的一段代码，模拟在给定地理位置上手机iphone 11 pro上的Safari浏览器，首先导航到maps.google.com，然后执行定位并截图。\nfrom playwright import sync_playwrightwith sync_playwright() as p:    iphone_11 = p.devices[&#x27;iPhone 11 Pro&#x27;]    browser = p.webkit.launch(headless=False)    context = browser.newContext(        **iphone_11,        locale=&#x27;en-US&#x27;,        geolocation=&#123; &#x27;longitude&#x27;: 12.492507, &#x27;latitude&#x27;: 41.889938 &#125;,        permissions=[&#x27;geolocation&#x27;]    )    page = context.newPage()    page.goto(&#x27;https://maps.google.com&#x27;)    page.click(&#x27;text=&quot;Your location&quot;&#x27;)    page.screenshot(path=&#x27;colosseum-iphone.png&#x27;)    browser.close()\n另外，还可以配合pytest插件一起使用，感兴趣可以自己试一下。\n总结playwright相比已有的自动化测试工具有很多优势，比如：\n\n跨浏览器，支持Chromium、Firefox、WebKit\n跨操作系统，支持Linux、Mac、Windows\n可提供录制生成代码功能，解放双手\n可用于移动端\n\n目前存在的缺点就是生态和文档还不是非常完备，比如没有API中文文档、没有较好的教程和示例供学习。不过相信，随着知道的人越来越多，未来会越来越好。\n\nGitHub链接：https://github.com/microsoft/playwright-python开源组织：Microsoft\n\n","categories":["Python"]},{"title":"apache 无法读取index.html","url":"/2021/03/07/apache-%E6%97%A0%E6%B3%95%E8%AF%BB%E5%8F%96index-html/","content":"问题在测试一个功能时，建立子站，里面全是静态文件，使用 Apache 链接到该项目目录，访问时，却提示 500 Internal Server Error\n检查 Apache 配置文件，并没有问题，在 URL 链接后加上 index.html 就能正常访问\n解决在 stackoverflow 看到相似的问题.htaccess DirectoryIndex不起作用，其中一位老哥的回答\n\nYou have to check if there is any htaccess rule on parent directory that conflics with this rule, my problem was that, having a RewriteEngine on root directory and “/folder/“ DirectoryIndex won’t work.\n您必须检查在父目录上是否有任何htaccess规则与此规则相冲突，我的问题是，在根目录和“ / folder /” DirectoryIndex上具有RewriteEngine将不起作用。\n\n\n修改父级 .htaccess在 RewriteCond 中添加 子站的目录html添加前:RewriteCond $1  !^(index\\.php|image|robots\\.txt|favicon\\.ico)添加后:RewriteCond $1 !^(index\\.php|image|robots\\.txt|favicon\\.ico|html)\n\n子站根目录下 添加首页访问规则在子站 html 根目录下新建 .htaccess ,输入以下内容DirectoryIndex index.html index.htm\n\n查看 Apache 是否开启重写找到 Apache 软件所在目录\n\n\n\n如果你是单个网站，且没有添加过网站对应的 .conf 文件\n\n编辑 apache/conf/httpd.conf ，修改AllowOverride None 为 AllowOverride All\n\n\n如果有多个网站，且每个网站都有对应的 .conf 文件,如我当前项目的为test,端口为80，则网站配置文件为test_80.conf\n\n编辑 apache/conf/vhosts/test_80.conf ,修改AllowOverride None 为 AllowOverride All,没有则添加\n\n\n\n\n相关资料:\n\n.htaccess DirectoryIndex不起作用 |stackoverflow\nApache Core Features\n\n","categories":["Apache"]},{"title":"fastCGI 意外退出","url":"/2021/03/07/fastCGI-%E6%84%8F%E5%A4%96%E9%80%80%E5%87%BA/","content":"问题系 统：Windows server 2008服务器：IIS7php 5.5\n来自anlondon博客\n解决情况一：程序导致的问题查询资料时，iis7自身是集成了php_pdo.dll的，同时查看服务器其他的项目，都运行正常，说明可能是项目本身的原因，加之iis7与fast-cgi是单线程\n于是重启服务器(开关机的那种)，访问项目其他页面，发现访问正常，只有首页加载很慢且加载不全，查看页面代码，发现因为客户修改后台数据导致程序中出现了一个死循环；\n修改相应的代码，解决。\n情况二：缺失相关文件在iis服务器除了php_pdo外\n进入服务器,查看资源管理器，右键php-cgi.exe-&gt;所在位置\n来自anlondon博客\n双击php.exe、php-cgi.php,出现下面的提示\n来自anlondon博客\n去下载对应版本的php_xxx.dll即可。\n\n相关资料:\n\nphp_pdo.dll下载并配置|脚本之家\n64位IIS7下的PHP 5.4配置及如何连接SQL Server 2008\n“php-cgi.exe - FastCGI 进程意外退出” 的解决办法 |CSDN ltylove2007\nphp pdo drivers won’t load on Windows Server 2008 using IIS Fast-CGI\nGetting Microsoft PHP PDO for SQL Server working |stackOverflow\n\n","categories":["PHP"]},{"title":"git-不同版本pull时报错","url":"/2021/03/07/git-%E4%B8%8D%E5%90%8C%E7%89%88%E6%9C%ACpull%E6%97%B6%E6%8A%A5%E9%94%99/","content":"前提我在家里弄ci-demo,修改了之后上传到coding,回到公司后，想覆盖公司电脑文件细节不一样的版本\npull时报错fatal: refusing to merge unrelated histories\nhttp://anlondon.cn:4000/2021/01/27/git-%E4%B8%8D%E5%90%8C%E7%89%88%E6%9C%ACpull%E6%97%B6%E6%8A%A5/pasted-1.png\n通过博客的讲解，使用git pull origin master --allow-unrelated-historieshttp://anlondon.cn:4000/2021/01/27/git-%E4%B8%8D%E5%90%8C%E7%89%88%E6%9C%ACpull%E6%97%B6%E6%8A%A5/pasted-2.png\nhttp://anlondon.cn:4000/2021/01/27/git-%E4%B8%8D%E5%90%8C%E7%89%88%E6%9C%ACpull%E6%97%B6%E6%8A%A5/pasted-3.png\n最后 手动编辑 保留想要的版本即可\nhttp://anlondon.cn:4000/2021/01/27/git-%E4%B8%8D%E5%90%8C%E7%89%88%E6%9C%ACpull%E6%97%B6%E6%8A%A5/pasted-4.png\nhttp://anlondon.cn:4000/2021/01/27/git-%E4%B8%8D%E5%90%8C%E7%89%88%E6%9C%ACpull%E6%97%B6%E6%8A%A5/pasted-5.png\n","categories":["Git"]},{"title":"Hello World","url":"/2021/03/06/hello-world/","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new post$ hexo new &quot;My New Post&quot;\n\nMore info: Writing\nRun server$ hexo server\n\nMore info: Server\nGenerate static files$ hexo generate\n\nMore info: Generating\nDeploy to remote sites$ hexo deploy\n\nMore info: Deployment\n"},{"title":"hexo-admin@2.3.0汉化与优化","url":"/2021/03/07/hexo-admin-2-3-0%E6%B1%89%E5%8C%96%E4%B8%8E%E4%BC%98%E5%8C%96/","content":"参考hexo-admin汉化补丁\n与原版的区别\n进行了汉化\n让图片管理更方便，每篇文章都有对应的图片文件夹。\n添加了自动保存和部署的功能\n\n问题\n过于频繁的自动提交，每次键入停顿时间超过一秒，就会自动上传罪最新的文本，并自动更新静态文件；文本过大时，这会影响到使用，也会加重服务器的负担。\n\n","categories":["Hexo"]},{"title":"hexo-admin后台更新静态文件","url":"/2021/03/07/hexo-admin%E5%90%8E%E5%8F%B0%E6%9B%B4%E6%96%B0%E9%9D%99%E6%80%81%E6%96%87%E4%BB%B6/","content":"建立.sh文件因为我服务器为linux，所以这里就以linux下作为演示\n# 1.你的博客根目录下，新建一个存放shell脚本的目录$ mkdir ./script$ vim ./script/hexo-g.sh# 2.按 i 进入编辑# 输入 #!/bin/bash &lt;-表示执行下面命令的程序hexo clean &amp;&amp; hexo g# 3.ESC退出编辑模式，输入 :wq 保存退出# 输出文件内容$ cat ./script/hexo-g.sh#!/bin/bashhexo clean &amp;&amp; hexo g# 4.给文件执行权限$ chmod +x ./script/hexo-g.sh\n\n在_config.yml添加执行command$ vim _config.yml# 输入以下内容 admin:   username: xxxxx   password_hash: XXXXXXXX   secret: XXXXXX   deployCommand: &#x27;./script/hexo-g.sh&#x27;\n\n使用写完博客，点击即可\n来自anlondon博客\n因为我不需要推送到git,所以没配置git和hexo d，如有需要可以自行配置\n可能的错误页面报错：\n来自anlondon博客\n命令行报错：\nres Error: spawn ./script/hexo-g.sh EACCE    at Process.ChildProcess._handle.onexit (internal/child_process.js:269:19)    at onErrorNT (internal/child_process.js:465:16)    at processTicksAndRejections (internal/process/task_queues.js:80:21) &#123;  errno: -13,  code: &#x27;EACCES&#x27;,  syscall: &#x27;spawn ./script/hexo-g.sh&#x27;,  path: &#x27;./script/hexo-g.sh&#x27;,  spawnargs: [ &#x27;&#x27; ]&#125; &#123; stdout: &#x27;&#x27;, stderr: &#x27;&#x27; &#125;\n\n原因：是因为我linux没有安装expect，而spawn是expect的功能之一，yum install expect即可解决\n更多hexo-admin的问答见hexo-admin 开发者问答\n","categories":["Hexo"]},{"title":"hexo 给文章中英文添加空格","url":"/2021/03/07/hexo-%E7%BB%99%E6%96%87%E7%AB%A0%E4%B8%AD%E8%8B%B1%E6%96%87%E6%B7%BB%E5%8A%A0%E7%A9%BA%E6%A0%BC/","content":"来源: 振伟普拉斯 | Hexo 给文章中英文添加空格 \n\n在使用Hexo写文章时，由于写的大都是些技术类的文章，中英文字符经常交错在一起，对于强迫症的我来说看起来着实不舒服了。\n好在 GitHub 上什么大神都有，还真有人开发了给中英文添加空格的工具：https://github.com/vinta/pangu.js\n\n   　　為什麼你們就是不能加個空格呢？   　　如果你跟我一樣，每次看到網頁上的中文字和英文、數字、符號擠在一塊，就會坐立難安，忍不住想在它們之間加個空格。這個外掛（支援 Chrome 和 Firefox）正是你在網路世界走跳所需要的東西，它會自動替你在網頁中所有的中文字和半形的英文、數字、符號之間插入空白。\n   　　漢學家稱這個空白字元為「盤古之白」，因為它劈開了全形字和半形字之間的混沌。另有研究顯示，打字的時候不喜歡在中文和英文之間加空格的人，感情路都走得很辛苦，有七成的比例會在 34 歲的時候跟自己不愛的人結婚，而其餘三成的人最後只能把遺產留給自己的貓。畢竟愛情跟書寫都需要適時地留白。\n\n在 Hexo 中使用也很简单，npm 安装一下就可以了：npm install hexo-pangu-spacing --save\n然后重新 hexo g 看修改后的效果。\n20191201，纠正上面这个插件有些问题，在代码中也会加入空格，代码中应该是不需要的。\n又找到另一个插件，试了下没问题：https://github.com/hexojs/hexo-filter-auto-spacing\n其他问题(anlondon)\nhexo-pangu-spacing会导致 **加粗** 失效\nhexo-filter-auto-spacing会导致脚注插件不能正常运行\n\n相关文章\n\nHexo NexT 主题添加自定义字体（基于 7.1.0 版本）\nHexo 使用 hexo-neat 插件压缩页面资源\nHexo NexT 主题集成 utterance 评论系统\nHexo Next 主题自定义样式\n\n","categories":["Hexo"]},{"title":"md引用base64图片","url":"/2021/03/07/md%E5%BC%95%E7%94%A8base64%E5%9B%BE%E7%89%87/","content":"markdown 引用base64图片使用\n声明[image_name]:data:image/png;base64,..\n调用![图片描述][image_name]\n注意：图片越大，base64代码越多，加载也就会越久前端规范中，一般在2k及以下的图片才能使用 Base64\n\n\n\n图片转 Base64 的网站站长工具\n注意！hexo-admin 测试 Base64 时，会出现加载很慢的情况，是因为 hexo-admin 会一次加载全部的文章数据，而过多的 Base64 会导致数据包过大影响页面加载速度。\n","categories":["MarkDown"]},{"title":"node版本导致的错误","url":"/2021/03/07/node%E7%89%88%E6%9C%AC%E5%AF%BC%E8%87%B4%E7%9A%84%E9%94%99%E8%AF%AF/","content":"错误cant not found moudle mybolgPath/...\n说是找不到模块...，这个有点奇怪的报错，让我觉得莫名其妙，于是在网上各种搜索\n原因看到有大佬说如果文件配置和模块都没问题，但提示找不到模块，多半是node版本不适合当前项目导致的\n想了想，我最近在鼓捣自己的博客时，改动最多的就是配置文件，模块什么的就没动过，最大的改动就是为了测试一个功能安装了最新版的node。\n解决最开始我用的是node v11.14.0,之后更新到了 v14.15.0想要快捷简单的管理node版本，可以使用n一个node的版本控制插件\n安装nnpm install -g n\n查看node版本node -v14.15.0\n下载11.14.0n v11.14.0[1]\n完成后查看node版本node -v11.14.0\n之后再次运行博客，就没出现找不到模块的错误了，解决。\n1.可能会提示PATH=$PATH之类的错误，是因为系统还在使用之前版本的node,运行一下PATH=$PATH即可 ↩","categories":["node"]},{"title":"pm2项目启动成功，但pm2 list又显示errored的问题","url":"/2021/03/07/pm2%E9%A1%B9%E7%9B%AE%E5%90%AF%E5%8A%A8%E6%88%90%E5%8A%9F%EF%BC%8C%E4%BD%86pm2-list%E5%8F%88%E6%98%BE%E7%A4%BAerrored%E7%9A%84%E9%97%AE%E9%A2%98/","content":"\n首先先判断入口js文件app.js在node上是否能正确运行，确定是否缺少依赖。如若缺少则安装对应的依赖再进行pm2管理。\n\n如若node能正常运行，pm2也能正常启动，但在使用pm2 list命令查看列表时项目出现errored，则尝试以下两行命令\n\n\n来自anlondon博客\nps aux | grep pm2 (查看pm2进程占用情况)kill -9  14360 (这个数值要依据你上面命令返回的进程id进行填写)\n\n杀死pm2进程之后再次重启项目，解决问题。\n\n也可以通过pm2 show id来查看详细的错误信息，进行对应的处理\n\n","categories":["pm2"]},{"title":"ftp多用户配置","url":"/2021/03/07/tp%E5%A4%9A%E7%94%A8%E6%88%B7%E9%85%8D%E7%BD%AE/","content":"起因一个客户要求一个文件夹里的不同子目录需要不同的ftp账号进行管理，例如下面，这是一位客户的要求\nFTP1，不绑定域名，有读写权限，预先建立以下目录结构：    /bootstrap    /bootstrap/resources    /bootstrap/resources/attachment    /bootstrap/resources/skinFTP2，绑定域名sso.xxx.com、www.xxx.com、data.xxx.com，有读写权限；路径为\t/bootstrapFTP3，绑定域名file.xxx.com，有读写权限；路径为\t/bootstrap/resources/attachment    FTP4，绑定域名skin.xxx.com，有读写权限；路径为\t/bootstrap/resources/skinFTP5，绑定域名ress.xxx.com，有读写权限；路径为\t/bootstrap/resources\n\n问题建立多层级目录，和对应的ftp后，发现只有父级目录的ftp账号能链接访问，而子级ftp账号却显示不能链接，\n比如使用 FTP1 连接时，可以访问 /bootstrap ，但是子级目录却只能看不能进入访问\n而使用剩余的账号访问时，直接就拒绝访问了。\n解决这是因为在建立ftp时，对应的目录的所有者会变为对应的ftp账号，而其他账号会因为没有访问权限而被阻止访问。\n例如在建立 FTP1 时，/bootstrap目录的所有者会变为 FTP1 账号。而建立其他账号时，也相应的改变了对应目录的所有者权限，但是父级目录的权限却并没有改变。所以需要给父级目录分别添加上对应的子级账号访问控制权限即可。\n\n在父级目录 给 子级账号访问权限\n同时也要在子级目录 给 FTP1 访问权限\n\n\n注意：只需要在父级目录修改权限即可，子级目录会自动继承父级栏目的权限设定\n\n","categories":["FTP"]},{"title":"xdebug断掉调试经常无故断开","url":"/2021/03/07/xdebug%E6%96%AD%E6%8E%89%E8%B0%83%E8%AF%95%E7%BB%8F%E5%B8%B8%E6%97%A0%E6%95%85%E6%96%AD%E5%BC%80/","content":"需要在vhost.conf中加上两行\nIPCConnectTimeout 3000IPCCommTimeout 3000\n\n&lt;VirtualHost *:80&gt;\tDocumentRoot &quot;D:/phpstudy_pro/WWW/login&quot;\tServerName www.1688.net\tServerAlias    FcgidInitialEnv PHPRC &quot;D:/phpstudy_pro/Extensions/php/php-5.6.27-nts&quot;    AddHandler fcgid-script .php    #加入以下两行    IPCConnectTimeout 3000    IPCCommTimeout 3000#end     FcgidWrapper &quot;D:/phpstudy_pro/Extensions/php/php-5.6.27-nts/php-cgi.exe&quot; .php    &lt;Directory &quot;D:/phpstudy_pro/WWW/login&quot;&gt;    Options FollowSymLinks ExecCGI    AllowOverride All    Order allow,deny    Allow from all    Require all granted    DirectoryIndex index.php index.html    &lt;/Directory&gt;&lt;/VirtualHost&gt;","categories":["PHP"]},{"title":"一场失眠的胡思乱想","url":"/2021/03/07/%E4%B8%80%E5%9C%BA%E5%A4%B1%E7%9C%A0%E7%9A%84%E8%83%A1%E6%80%9D%E4%B9%B1%E6%83%B3/","content":"失眠了，，，，外面下着小雨，我躲在被窝里，想着星空。\n都说即使在阴沟也要抬头望着星空，就是不知道星空是否也在低头望着我？\n","categories":["生活"]},{"title":"为Hexo博客添加脚注插件","url":"/2021/03/07/%E4%B8%BAHexo%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E8%84%9A%E6%B3%A8%E6%8F%92%E4%BB%B6/","content":"hexo自带的插件npm install hexo-reference --save\n\n语法[^1][1][^1]:内容\n\n〔如用了pm2来管理hexo server，需要完全关闭进程后再运行，才能生效〕\n其他来源：大专栏|为Hexo博客添加脚注插件\n注意： 文中涉及的markdown插件需要单独安装\nplugins:    - markdown-it-abbr    - markdown-it-footnote    - markdown-it-ins    - markdown-it-sub    - markdown-it-sup\n上面的所有插件都要安装npm i markdown-it-abbr markdown-it-footnote markdown-it-ins markdown-it-sub markdown-it-sup --save之后重启服务器即可生效\n注：以上的插件，都对base64支持不够，会导致页面不能正确的加载base64图片\n1.该插件为hexo原生的脚注插件，不需要任何配置，安装重启服务器即可用 ↩","categories":["Hexo"]},{"title":"缺少 「secure」 cookie 已拒绝 “ci-session”","url":"/2021/03/07/%E5%B0%91-%E3%80%8Csecure%E3%80%8D-cookie-%E5%B7%B2%E6%8B%92%E7%BB%9D-%E2%80%9Cci-session%E2%80%9D/","content":"问题最近在做公司的一个抽奖活动项目，由于是手机端，所以没有设置cookie的保存时间，即默认cookie为临时会话，当用户关闭浏览器或者关闭网页cookie就会过期。\n但是在测试时，明明没有关闭网页和浏览器，刚刚登陆过一会就又跳转到登陆页面，查看浏览器控制台，显示如下信息。ci-session 为后台设置的cookie_name\n缺少 「secure」 cookie 已拒绝 “ci-session”\n解决在 cookie 设置中，将$config[&#39;cookie_secure&#39;]的值改为TRUE，问题解决\n\n相关资料：\n\nCookie 的 SameSite 属性 |CSDN 我依旧满足于那么的不自信\n\n","categories":["cookie"]},{"title":"建立局域网git仓库","url":"/2021/03/07/%E5%BB%BA%E7%AB%8B%E5%B1%80%E5%9F%9F%E7%BD%91git%E4%BB%93%E5%BA%93/","content":"建立本地git仓库并共享\n新建一个文件夹，路径不要太长，最好是硬盘下的一级文件夹\n使用git init --bare建立一个仓库，该指令表示建立一个 独立的仓库 使用git init –bare建立一个本地裸仓库\n共享该目录，添加guest访客并给予读写权限\n右键该目录-&gt;属性-&gt;共享-&gt;高级共享，勾选共享此文件夹\n点击权限-&gt;给Everyone完全控制的权限-&gt;点击确定-&gt;点击应用来自anlondon博客来自anlondon博客    \n\n\n进入一个本地的项目，并且提交到本地仓库中 来自anlondon博客\n使用ipconfig查看本机的局域网ip,格式为 192.168.0.xxx\n\n在局域网的另一台电脑上拉取项目\n进入网络，可以看到共享的仓库 来自anlondon博客\ngit clone //192.168.0.xxx/test.git或者git pull //192.168.0.xxx来拉取项目 来自anlondon博客\n\n","categories":["Git"]}]