[{"title":"Hello World","url":"/2021/03/06/hello-world/","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new post$ hexo new &quot;My New Post&quot;\n\nMore info: Writing\nRun server$ hexo server\n\nMore info: Server\nGenerate static files$ hexo generate\n\nMore info: Generating\nDeploy to remote sites$ hexo deploy\n\nMore info: Deployment\n"},{"title":"hexo-admin后台更新静态文件","url":"/2021/03/07/hexo-admin%E5%90%8E%E5%8F%B0%E6%9B%B4%E6%96%B0%E9%9D%99%E6%80%81%E6%96%87%E4%BB%B6/","content":"建立.sh文件因为我服务器为linux，所以这里就以linux下作为演示\n# 1.你的博客根目录下，新建一个存放shell脚本的目录$ mkdir ./script$ vim ./script/hexo-g.sh# 2.按 i 进入编辑# 输入 #!/bin/bash &lt;-表示执行下面命令的程序hexo clean &amp;&amp; hexo g# 3.ESC退出编辑模式，输入 :wq 保存退出# 输出文件内容$ cat ./script/hexo-g.sh#!/bin/bashhexo clean &amp;&amp; hexo g# 4.给文件执行权限$ chmod +x ./script/hexo-g.sh\n\n在_config.yml添加执行command$ vim _config.yml# 输入以下内容 admin:   username: xxxxx   password_hash: XXXXXXXX   secret: XXXXXX   deployCommand: &#x27;./script/hexo-g.sh&#x27;\n\n使用写完博客，点击即可\n来自anlondon博客\n因为我不需要推送到git,所以没配置git和hexo d，如有需要可以自行配置\n可能的错误页面报错：\n来自anlondon博客\n命令行报错：\nres Error: spawn ./script/hexo-g.sh EACCE    at Process.ChildProcess._handle.onexit (internal/child_process.js:269:19)    at onErrorNT (internal/child_process.js:465:16)    at processTicksAndRejections (internal/process/task_queues.js:80:21) &#123;  errno: -13,  code: &#x27;EACCES&#x27;,  syscall: &#x27;spawn ./script/hexo-g.sh&#x27;,  path: &#x27;./script/hexo-g.sh&#x27;,  spawnargs: [ &#x27;&#x27; ]&#125; &#123; stdout: &#x27;&#x27;, stderr: &#x27;&#x27; &#125;\n\n原因：是因为我linux没有安装expect，而spawn是expect的功能之一，yum install expect即可解决\n更多hexo-admin的问答见hexo-admin 开发者问答\n","categories":["Hexo"]},{"title":"md引用base64图片","url":"/2021/03/07/md%E5%BC%95%E7%94%A8base64%E5%9B%BE%E7%89%87/","content":"markdown 引用base64图片使用\n声明[image_name]:data:image/png;base64,..\n调用![图片描述][image_name]\n注意：图片越大，base64代码越多，加载也就会越久前端规范中，一般在2k及以下的图片才能使用 Base64\n\n\n\n图片转 Base64 的网站站长工具\n注意！hexo-admin 测试 Base64 时，会出现加载很慢的情况，是因为 hexo-admin 会一次加载全部的文章数据，而过多的 Base64 会导致数据包过大影响页面加载速度。\n","categories":["MarkDown"]},{"title":"node版本导致的错误","url":"/2021/03/07/node%E7%89%88%E6%9C%AC%E5%AF%BC%E8%87%B4%E7%9A%84%E9%94%99%E8%AF%AF/","content":"错误cant not found moudle mybolgPath/...\n说是找不到模块...，这个有点奇怪的报错，让我觉得莫名其妙，于是在网上各种搜索\n原因看到有大佬说如果文件配置和模块都没问题，但提示找不到模块，多半是node版本不适合当前项目导致的\n想了想，我最近在鼓捣自己的博客时，改动最多的就是配置文件，模块什么的就没动过，最大的改动就是为了测试一个功能安装了最新版的node。\n解决最开始我用的是node v11.14.0,之后更新到了 v14.15.0想要快捷简单的管理node版本，可以使用n一个node的版本控制插件\n安装nnpm install -g n\n查看node版本node -v14.15.0\n下载11.14.0n v11.14.0^1\n完成后查看node版本node -v11.14.0\n之后再次运行博客，就没出现找不到模块的错误了，解决。\n","categories":["node"]},{"title":"pm2项目启动成功，但pm2 list又显示errored的问题","url":"/2021/03/07/pm2%E9%A1%B9%E7%9B%AE%E5%90%AF%E5%8A%A8%E6%88%90%E5%8A%9F%EF%BC%8C%E4%BD%86pm2-list%E5%8F%88%E6%98%BE%E7%A4%BAerrored%E7%9A%84%E9%97%AE%E9%A2%98/","content":"\n首先先判断入口js文件app.js在node上是否能正确运行，确定是否缺少依赖。如若缺少则安装对应的依赖再进行pm2管理。\n\n如若node能正常运行，pm2也能正常启动，但在使用pm2 list命令查看列表时项目出现errored，则尝试以下两行命令\n\n\n来自anlondon博客\nps aux | grep pm2 (查看pm2进程占用情况)kill -9  14360 (这个数值要依据你上面命令返回的进程id进行填写)\n\n杀死pm2进程之后再次重启项目，解决问题。\n\n也可以通过pm2 show id来查看详细的错误信息，进行对应的处理\n\n","categories":["pm2"]}]