[{"title":"Git 配置与介绍","url":"/2021/03/07/Git-%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BB%8B%E7%BB%8D/","content":"Github一、安装配置\n安装 \n访问网址 Git-download\nlinux Git-linux\n # yum install git (up to Fedora 21)\n # dnf install git(Fedora 22 and later)\n\n\n\n\n配置\n第一次使用需要进行用户配置\n# git config --global user.name &quot;username&quot;(不支持中文)\n# git config --global user.email &quot;useremail&quot;\n查看配置结果# git config --list\n\n\n\n\n\n二、认识Git\ngit记录的是什么\n\n\n![431e79f8.png]传统的版本控制器如svn工作原理，则是记录文件的每次改动\n\n\n\n\n![6c92b049.png]Git则是每个版本都保存一次，形成一个分支\n普通的程序员是把很多时间放在写代码和调bug上，而优秀的程序员是将更多的经历放在设计上。\n\n\n\ngit的工作流程\n\ngit流程\n本地：在工作目录中添加、修改文件\n暂存区-本地：将需要进行版本管理的文件放入暂存区\n提交：将暂存区的文件提交到Git仓库\n\n\ngit管理文件的三种状态\n已修改 (modified)\n已暂存 (staged)\n已提交 (committed)\n\n\n\n\n![8f8a0fbb.png]\n\n\n\n三、使用\nGit -生成 -添加 -提交\n\n# git init即可在当前项目中生成一个.git目录\n# git add README.md 文件添加到暂存区(本地必须存在该文件)。文件编码：utf-8notBOM\n# git commit -m &quot;add a readme file&quot;提交文件到仓库，””中为本次提交说明信息[^返回信息]\n# git log 查看历史提交记录,从近到远排序，commit后为提交的唯一hashId Author提交作者，Date提交时间，以及提交说明 \n\n\nGit -查看状态\n\n# git status 查看git状态，出现的提示[^出现的提示]\n文件的两种状态[^文件的两种状态]\n\n\nGit -取消暂存\n\n# git reset HEAD &lt;file&gt;... 取消还未提交文件的暂存状态，不指定文件则将当前所有暂存状态文件全部取消暂存状态\n\n\n\n\nGit -取消修改\n\n[!] # git checkout -- &lt;file&gt; 将仓库最近一次提交的file覆盖本地file\n\n\nGit -查看历史记录\n\n# git reflog 查看git历史记录\n\n\n\n四、Git -reset![5d67d3bb.png]\n\nGIT -reset\n# git reset HEAD &lt;file&gt;... \n取消还未提交文件的暂存状态，不指定文件则将当前所有暂存状态文件全部取消暂存状态\n仅对暂存区文件有效\n\n\n# git reset --mixed HEAD~\n--mixed默认指令，不加也可\n移动HEAD^HEAD的指向，将其指向指定的快照^快照\n将HEAD(指针)移动后指向的快照 回滚到暂存区，工作目录不受影响\n\n\n# git reset --soft HEAD~\n--soft软回滚\n移动HEAD的指向，将其指向上一个快照\n将指定版本的提交，回滚到暂存区，相当于撤销指定版本的一次提交\n\n\n# git reset --hard HEAD~\n--hard强制回滚\n移动HEAD的指向，将其指向指定的快照\n将HEAD指向的快照回滚到暂存区，同时将暂存区的文件还原到工作目录\n相当于本地、暂存区完全回滚到指定快照(版本)\n**会覆盖本地文件，删除版本中没有文的件**\n\n\n\n\nGit -回滚指定快照\n~ 可换成指定Hashid，一般输入Hashid不少于5位即可识别\n# git reset Hashid,只要知道某版本的Hashid，就可以回滚到暂存区，如果加上--hard,就会直接回滚到工作目录中\n\n\nGit -回滚个别文件\n# git reset 版本快照 文件名/路径因为没有HEAD指令，所以不会移动HEAD   \n&lt;span class=”hint–top hint–error hint–medium hint–rounded hint–bounce” aria-label=”fasfdsafdsa[^返回信息]: 如果提交无误，则会返回【create mode 100644 readme.md】,其中100表示文件为普通文件，644表示权限[^出现的提示]: ‘on branch master’ 表示处于一个分支上；’Untracked files’表示下面红色的文件/文件夹是没有添加到暂存区的；’changes to be committed’表示新添加到暂存区的文件[^文件的两种状态]: 当一个文件已经被添加到暂存区(HEAD)后，这时再修改该文件，# git status就会看到该文件的两种状态，一个未提交到仓库(绿色)，一个未添加到暂存区。\n\n\n\n[^快照]: 每一个版本称为一个快照”&gt;[1]\n1.fasfdsafdsa\n[^返回信息]: 如果提交无误，则会返回【create mode 100644 readme.md】,其中100表示文件为普通文件，644表示权限\n[^出现的提示]: 'on branch master' 表示处于一个分支上；'Untracked files'表示下面红色的文件/文件夹是没有添加到暂存区的；'changes to be committed'表示新添加到暂存区的文件\n[^文件的两种状态]: 当一个文件已经被添加到暂存区(HEAD)后，这时再修改该文件，# git status就会看到该文件的两种状态，一个未提交到仓库(绿色)，一个未添加到暂存区。\n[^HEAD]: 这里的HEAD表示指针，表示指向某个分支。HEAD~表示指向上一个分支，并覆盖本地文件HEAD~~表示回退2个版本，也可使用HREAD~2表示\n[^快照]: 每一个版本称为一个快照 ↩","categories":["Git"]},{"title":"git-不同版本pull时报错","url":"/2021/03/07/git-%E4%B8%8D%E5%90%8C%E7%89%88%E6%9C%ACpull%E6%97%B6%E6%8A%A5%E9%94%99/","content":"前提我在家里弄ci-demo,修改了之后上传到coding,回到公司后，想覆盖公司电脑文件细节不一样的版本\npull时报错fatal: refusing to merge unrelated histories\nhttp://anlondon.cn:4000/2021/01/27/git-%E4%B8%8D%E5%90%8C%E7%89%88%E6%9C%ACpull%E6%97%B6%E6%8A%A5/pasted-1.png\n通过博客的讲解，使用git pull origin master --allow-unrelated-historieshttp://anlondon.cn:4000/2021/01/27/git-%E4%B8%8D%E5%90%8C%E7%89%88%E6%9C%ACpull%E6%97%B6%E6%8A%A5/pasted-2.png\nhttp://anlondon.cn:4000/2021/01/27/git-%E4%B8%8D%E5%90%8C%E7%89%88%E6%9C%ACpull%E6%97%B6%E6%8A%A5/pasted-3.png\n最后 手动编辑 保留想要的版本即可\nhttp://anlondon.cn:4000/2021/01/27/git-%E4%B8%8D%E5%90%8C%E7%89%88%E6%9C%ACpull%E6%97%B6%E6%8A%A5/pasted-4.png\nhttp://anlondon.cn:4000/2021/01/27/git-%E4%B8%8D%E5%90%8C%E7%89%88%E6%9C%ACpull%E6%97%B6%E6%8A%A5/pasted-5.png\n","categories":["Git"]},{"title":"Hello World","url":"/2021/03/06/hello-world/","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new post$ hexo new &quot;My New Post&quot;\n\nMore info: Writing\nRun server$ hexo server\n\nMore info: Server\nGenerate static files$ hexo generate\n\nMore info: Generating\nDeploy to remote sites$ hexo deploy\n\nMore info: Deployment\n"},{"title":"hexo-admin@2.3.0汉化与优化","url":"/2021/03/07/hexo-admin-2-3-0%E6%B1%89%E5%8C%96%E4%B8%8E%E4%BC%98%E5%8C%96/","content":"参考hexo-admin汉化补丁\n与原版的区别\n进行了汉化\n让图片管理更方便，每篇文章都有对应的图片文件夹。\n添加了自动保存和部署的功能\n\n问题\n过于频繁的自动提交，每次键入停顿时间超过一秒，就会自动上传罪最新的文本，并自动更新静态文件；文本过大时，这会影响到使用，也会加重服务器的负担。\n\n","categories":["Hexo"]},{"title":"hexo-admin后台更新静态文件","url":"/2021/03/07/hexo-admin%E5%90%8E%E5%8F%B0%E6%9B%B4%E6%96%B0%E9%9D%99%E6%80%81%E6%96%87%E4%BB%B6/","content":"建立.sh文件因为我服务器为linux，所以这里就以linux下作为演示\n# 1.你的博客根目录下，新建一个存放shell脚本的目录$ mkdir ./script$ vim ./script/hexo-g.sh# 2.按 i 进入编辑# 输入 #!/bin/bash &lt;-表示执行下面命令的程序hexo clean &amp;&amp; hexo g# 3.ESC退出编辑模式，输入 :wq 保存退出# 输出文件内容$ cat ./script/hexo-g.sh#!/bin/bashhexo clean &amp;&amp; hexo g# 4.给文件执行权限$ chmod +x ./script/hexo-g.sh\n\n在_config.yml添加执行command$ vim _config.yml# 输入以下内容 admin:   username: xxxxx   password_hash: XXXXXXXX   secret: XXXXXX   deployCommand: &#x27;./script/hexo-g.sh&#x27;\n\n使用写完博客，点击即可\n来自anlondon博客\n因为我不需要推送到git,所以没配置git和hexo d，如有需要可以自行配置\n可能的错误页面报错：\n来自anlondon博客\n命令行报错：\nres Error: spawn ./script/hexo-g.sh EACCE    at Process.ChildProcess._handle.onexit (internal/child_process.js:269:19)    at onErrorNT (internal/child_process.js:465:16)    at processTicksAndRejections (internal/process/task_queues.js:80:21) &#123;  errno: -13,  code: &#x27;EACCES&#x27;,  syscall: &#x27;spawn ./script/hexo-g.sh&#x27;,  path: &#x27;./script/hexo-g.sh&#x27;,  spawnargs: [ &#x27;&#x27; ]&#125; &#123; stdout: &#x27;&#x27;, stderr: &#x27;&#x27; &#125;\n\n原因：是因为我linux没有安装expect，而spawn是expect的功能之一，yum install expect即可解决\n更多hexo-admin的问答见hexo-admin 开发者问答\n","categories":["Hexo"]},{"title":"md引用base64图片","url":"/2021/03/07/md%E5%BC%95%E7%94%A8base64%E5%9B%BE%E7%89%87/","content":"markdown 引用base64图片使用\n声明[image_name]:data:image/png;base64,..\n调用![图片描述][image_name]\n注意：图片越大，base64代码越多，加载也就会越久前端规范中，一般在2k及以下的图片才能使用 Base64\n\n\n\n图片转 Base64 的网站站长工具\n注意！hexo-admin 测试 Base64 时，会出现加载很慢的情况，是因为 hexo-admin 会一次加载全部的文章数据，而过多的 Base64 会导致数据包过大影响页面加载速度。\n","categories":["MarkDown"]},{"title":"node版本导致的错误","url":"/2021/03/07/node%E7%89%88%E6%9C%AC%E5%AF%BC%E8%87%B4%E7%9A%84%E9%94%99%E8%AF%AF/","content":"错误cant not found moudle mybolgPath/...\n说是找不到模块...，这个有点奇怪的报错，让我觉得莫名其妙，于是在网上各种搜索\n原因看到有大佬说如果文件配置和模块都没问题，但提示找不到模块，多半是node版本不适合当前项目导致的\n想了想，我最近在鼓捣自己的博客时，改动最多的就是配置文件，模块什么的就没动过，最大的改动就是为了测试一个功能安装了最新版的node。\n解决最开始我用的是node v11.14.0,之后更新到了 v14.15.0想要快捷简单的管理node版本，可以使用n一个node的版本控制插件\n安装nnpm install -g n\n查看node版本node -v14.15.0\n下载11.14.0n v11.14.0[1]\n完成后查看node版本node -v11.14.0\n之后再次运行博客，就没出现找不到模块的错误了，解决。\n1.可能会提示PATH=$PATH之类的错误，是因为系统还在使用之前版本的node,运行一下PATH=$PATH即可 ↩","categories":["node"]},{"title":"pm2项目启动成功，但pm2 list又显示errored的问题","url":"/2021/03/07/pm2%E9%A1%B9%E7%9B%AE%E5%90%AF%E5%8A%A8%E6%88%90%E5%8A%9F%EF%BC%8C%E4%BD%86pm2-list%E5%8F%88%E6%98%BE%E7%A4%BAerrored%E7%9A%84%E9%97%AE%E9%A2%98/","content":"\n首先先判断入口js文件app.js在node上是否能正确运行，确定是否缺少依赖。如若缺少则安装对应的依赖再进行pm2管理。\n\n如若node能正常运行，pm2也能正常启动，但在使用pm2 list命令查看列表时项目出现errored，则尝试以下两行命令\n\n\n来自anlondon博客\nps aux | grep pm2 (查看pm2进程占用情况)kill -9  14360 (这个数值要依据你上面命令返回的进程id进行填写)\n\n杀死pm2进程之后再次重启项目，解决问题。\n\n也可以通过pm2 show id来查看详细的错误信息，进行对应的处理\n\n","categories":["pm2"]},{"title":"一场失眠的胡思乱想","url":"/2021/03/07/%E4%B8%80%E5%9C%BA%E5%A4%B1%E7%9C%A0%E7%9A%84%E8%83%A1%E6%80%9D%E4%B9%B1%E6%83%B3/","content":"失眠了，，，，外面下着小雨，我躲在被窝里，想着星空。\n都说即使在阴沟也要抬头望着星空，就是不知道星空是否也在低头望着我？\n","categories":["生活"]},{"title":"为Hexo博客添加脚注插件","url":"/2021/03/07/%E4%B8%BAHexo%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E8%84%9A%E6%B3%A8%E6%8F%92%E4%BB%B6/","content":"hexo自带的插件npm install hexo-reference --save\n\n语法[^1][1][^1]:内容\n\n〔如用了pm2来管理hexo server，需要完全关闭进程后再运行，才能生效〕\n其他来源：大专栏|为Hexo博客添加脚注插件\n注意： 文中涉及的markdown插件需要单独安装\nplugins:    - markdown-it-abbr    - markdown-it-footnote    - markdown-it-ins    - markdown-it-sub    - markdown-it-sup\n上面的所有插件都要安装npm i markdown-it-abbr markdown-it-footnote markdown-it-ins markdown-it-sub markdown-it-sup --save之后重启服务器即可生效\n注：以上的插件，都对base64支持不够，会导致页面不能正确的加载base64图片\n1.该插件为hexo原生的脚注插件，不需要任何配置，安装重启服务器即可用 ↩","categories":["Hexo"]},{"title":"建立局域网git仓库","url":"/2021/03/07/%E5%BB%BA%E7%AB%8B%E5%B1%80%E5%9F%9F%E7%BD%91git%E4%BB%93%E5%BA%93/","content":"建立本地git仓库并共享\n新建一个文件夹，路径不要太长，最好是硬盘下的一级文件夹\n使用git init --bare建立一个仓库，该指令表示建立一个 独立的仓库 使用git init –bare建立一个本地裸仓库\n共享该目录，添加guest访客并给予读写权限\n右键该目录-&gt;属性-&gt;共享-&gt;高级共享，勾选共享此文件夹\n点击权限-&gt;给Everyone完全控制的权限-&gt;点击确定-&gt;点击应用来自anlondon博客来自anlondon博客    \n\n\n进入一个本地的项目，并且提交到本地仓库中 来自anlondon博客\n使用ipconfig查看本机的局域网ip,格式为 192.168.0.xxx\n\n在局域网的另一台电脑上拉取项目\n进入网络，可以看到共享的仓库 来自anlondon博客\ngit clone //192.168.0.xxx/test.git或者git pull //192.168.0.xxx来拉取项目 来自anlondon博客\n\n","categories":["Git"]}]