[{"title":"1.2swoole wget安装","url":"/2021/06/21/1-2swoole-wget%E5%AE%89%E8%A3%85/","content":"1.2swoole wget安装官方文档：Swoole4 文档参照：1.PHP—swoole通往大神修炼之路_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili2.分分钟学会swoole+tcp和udp服务端以及练习小案列——哔哩哔哩\nwget方法\n检查环境和php版本环境：Linuxphp: php-7.1 或更高版本gcc-4.8 或更高版本\n下载swoole# wget https://pecl.php.net/get/swoole-4.2.0.tgz# tar -zxf swoole-4.2.0.tgz\n安装依赖# yum -y install gcc gcc-c++ autoconf pcre-devel make\n编译# phpize#su ./configure 具体参数根据自己的需求#su make &amp;&amp; make install\n配置\n先# php -m | grep swoole,如果没有则可以# php -r &quot;echo phpinfo()&quot;看下是否报错。(1). 编译成功后，修改php.ini(# locate php.ini查找)加入extension=swoole.so(注意这里是swoole.so扩展地址)(2). 如果报’Unable to  load dynamic library “swoole.so”‘的错误，找到报错的目录然后在# vim /etc/ld.so.conf 最后一行添加上该目录，/ld.so.conf/是加载库文件。保存退出再输入# ldconfig即可\n如我的报错信息PHP Warning:  PHP Startup: Unable to load dynamic library 'swoole.so' (tried: /usr/lib64/php/modules/swoole.so (/usr/lib64/php/modules/swoole.so: undefined symbol: zif_time_nanosleep), /usr/lib64/php/modules/swoole.so.so (/usr/lib64/php/modules/swoole.so.so: cannot open shared object file: No such file or directory)) in Unknown on line 0 \n\n\n其中报错目录指向 /usr/lib64/php/modules,则在/etc/ld.so.conf最后添加该字段，保存后运行# ldconfig,再次运行# php -r &quot;echo phpinfo();&quot;则可以看到swoole的相关信息。有时因为加载的关系，# php -m | grep swoole不一定能找到。参考资料：安装Swoole报Unable to load dynamic library ‘swoole.so’错误的解决 - 一闻自习室\n\n\n\n\n\n","categories":["swoole","基础了解"],"tags":["swoole"]},{"title":"[Err] (1146)Table 'performance_schema.session_status' doesn't exist","url":"/2021/04/13/1/","content":"\n来源： Mysql出现Table ‘performance_schema.session_status’ doesn’t exist - 芳缘的个人空间 - OSCHINA\n\n在查询mysql的B+树大节点存储数据量大小时，出现\n[Err] 1146 - Table &#x27;performance_schema.session_status&#x27; doesn&#x27;t exist\n\n解决办法\nmysql -u &#123;user&#125; -pmysql&gt; set @@global.show_compatibility_56=ON;\n","categories":["MySql"]},{"title":"2. 编辑器自动上传项目到服务器","url":"/2021/06/21/2-%E7%BC%96%E8%BE%91%E5%99%A8%E8%87%AA%E5%8A%A8%E4%B8%8A%E4%BC%A0%E9%A1%B9%E7%9B%AE%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8/","content":"2. 编辑器自动上传项目到服务器\nphpStorm打开项目\n点击 工具tool -&gt; deployment -&gt; configuration\n弹出的窗口中点击 +  \n【name】: 你的项目名称  【Type】: SFTP\n点击项目名称，在【Mappings】中\n在”Deployment path on server 项目名称 “中写根目录/即可    \n\n\n在【Connection】中\nSFTP host： 后写服务器的IP地址 \nPort  ：服务器的端口号\nUser name:远程连接的用户名\nPassword：远程连接的用户密码  \n勾选 save password \n点击 Root path 后 …… 找到Linux下www并新建项目目录\n点击确定\n\n\n上传\n上传全部 tool-&gt;Deployment-&gt;Upload to..\n上传当前文件 tool-&gt;Deployment-&gt;Upload to 项目名\n自动更新 tool-&gt;Deployment-&gt;Automation Upload 每当出现文件更改就会自动更新\n\n\n浏览远程目录\ntool-&gt;Deployment-&gt;Browse Remote host 查看服务器该目录\n\n\n\n","categories":["swoole","基础了解"],"tags":["swoole"]},{"title":"3-2 swoole 源码安装","url":"/2021/08/07/3-2-swoole-%E6%BA%90%E7%A0%81%E5%AE%89%E8%A3%85/","content":"源码安装swoole下载地址：https://gitee.com/swoole/swoole/tree/v4.4.8/\n注意：\n\nphp7.4 对应swoole版本为4.4.8\n源码安装时，swoole包中没有 configure，在软件包目录下输入/php安装路径/php/bin/phpize,即可自动生成configure文件\nswoole编译时需要指定php-config位置。指令为./configure --with-php-config=/php安装路径/php/bin/php-config。\n\n一键安装#!&#x2F;bin&#x2F;bashpecl install swoole\n\n\n遇到的问题：\n\n错误：提供给函数‘zend_vm_stack_push_call_frame’的实参太多\nmake error:只允许在 C99 模式下使用‘for’循环初始化声明\nmake test error: proc_open() is available\n\n","categories":["swoole","Swoole入门到实战打造高性能赛事直播平台"],"tags":["swoole"]},{"title":"4-1 swoole TCP服务器","url":"/2021/08/07/4-1-swoole-TCP%E6%9C%8D%E5%8A%A1%E5%99%A8/","content":"[官方手册|tcp服务器]（https://wiki.swoole.com/#/start/start_tcp_server）\n–资料：\n\ntelnet安装|centos\n\n","categories":["swoole","Swoole入门到实战打造高性能赛事直播平台"],"tags":["swoole"]},{"title":"6.1 同步异步","url":"/2021/06/21/6-1-%E5%90%8C%E6%AD%A5%E5%BC%82%E6%AD%A5/","content":"6.1 同步异步! swoole4.0后不再支持异步回调模块 \n同步通信 sync适用场景：消息队列，硬件通信等，需要及时通信的应用场景\n在客户端client.php中\nSwoole\\Client-&gt;connect(string $host,int $port,   float $timeout = 0.5,   int $flag = 0 ): bool\n\nint $flag\n在 UDP 类型时表示是否启用 udp_connect 设定此选项后将绑定 $host 与 $port，此 UDP 将会丢弃非指定 host/port 的数据包。\n 在 TCP 类型，$flag=1 表示设置为非阻塞 socket，之后此 fd 会变成异步 IO，connect 会立即返回。如果将 $flag 设置为 1，那么在 send/recv 前必须使用 swoole_client_select 来检测是否完成了连接。\n\n\n同步阻塞\nconnect 方法会阻塞，直到连接成功并返回 true。这时候就可以向服务器端发送数据或者收取数据了。$client = new Swoole\\Client(SWOOLE_SOCK_TCP,SWOOLE_SOCK_SYNC);//SWOOLE_SOCK_SYNC 添加该参数开启同步通信\n\n\n\n异步通信 async","categories":["swoole","基础了解"],"tags":["swoole"]},{"title":"7. TCP和UDP介绍","url":"/2021/06/21/7-TCP%E5%92%8CUDP%E4%BB%8B%E7%BB%8D/","content":"7. TCP和UDP介绍详细的介绍见网络协议-&gt;TCP和UDP\n两者区别\nTCP面向连接(如打电话要先拨号建立连接);UDP是无连接的，即发送数据之前不需要建立连接\nTCP提供可靠的服务。也就是说，通过TCP连接传送的数据，无差错，不丢失，不重复，且按序到达；UDP尽最大努力交付，即不保证可蒙交付\ntcp通过校验和，重传控制，序号标识，滑动窗口、确认应答实现可靠传输。如丢包时的重发控制，还可以对次序乱掉的分包进行顺序控制。\nUDP具有较好的实时性，工作效率比TCP高，适用于对高速传输和实时性有较高的通信或广播通信。\nTCP对系统资源要求较多，UDP对系统资源要求较少。\n\n","categories":["swoole","基础了解"],"tags":["swoole"]},{"title":"8.1多任务处理中心","url":"/2021/06/21/8-1%E5%A4%9A%E4%BB%BB%E5%8A%A1%E5%A4%84%E7%90%86%E4%B8%AD%E5%BF%83/","content":"8.1多任务处理中心什么叫多任务处理中心？php属于单线程应用，每次只能处理一个任务，然而当项目越来越复杂越来越庞大时，单线程就难以支撑庞大繁多的任务处理，而有的任务会因为网络/用户反应时间等原因，导致框架需要得到某些数据却迟迟得不到使得任务阻塞。\n\n如1万个用户中一部分在付款等待付款结果，一部分在下单，一部分在等待短信通知，这些任务都会有一定的处理延迟，如果使用php框架处理，就会影响运行效率和用户体验。而多任务处理中心则是独立于框架外，可以高效并同时处理多个任务的swoole模块(Swoole\\Process)如上述的例子，当框架遇到一些需要等待较久且使用频繁的功能时，可以将任务传递给Swoole的多任务处理中心，处理中心可以同时运行并根据需要返回结果，而php框架主体应用不会产生阻塞等待，可以更加专注于自己的任务\n\n为什么需要多任务处理中心？\n在大流量高并发下为一部任务提供快速消费的能力\n实现业务逻辑的解耦，避免系统故障\n对人物做数据的轨迹、存储、挖掘、分析之类的工作\n\n简单的实例\n模拟10个任务,每个任务需要一秒钟\nfor($i=0;$i&lt;10;$i++)&#123;    sleep(1);    echo &#x27;正在执行任务&#x27;.($i+1);&#125;\n运行结果\n[hime@192 swoole-sixstartedu]$ time php job&#x2F;process.php 正在执行任务1正在执行任务2正在执行任务3正在执行任务4正在执行任务5正在执行任务6正在执行任务7正在执行任务8正在执行任务9正在执行任务10real\t0m10.053suser\t0m0.026ssys\t0m0.009s\n使用Swoole 提供的进程管理模块模拟十个任务\nfor($k=0;$k&lt;10;$k++)&#123;    $process = new Swoole\\Process(function()&#123;        //子进程        sleep(10);        echo &#x27;:正在执行任务&#x27;.PHP_EOL;    &#125;);    $process-&gt;start();//启动进程，创建进程&#125;//[hime@192 swoole-sixstartedu]$ time php job/process.php//:正在执行任务//:正在执行任务//:正在执行任务//:正在执行任务//:正在执行任务//:正在执行任务//:正在执行任务//:正在执行任务//:正在执行任务//:正在执行任务//real\t0m10.347s//user\t0m0.132s//sys\t0m2.200s\nfor循环制造了10个任务（sleep在实例process中，因此对for循环没有影响），并通过Process处理，10个任务同时进行，因此整体时间花费只在10s+从上面实例可以看出,swoole的进程处理是十分高效的，可以同时执行多个任务。p9:50分钟左右，讲解任务处理中心的功能分层（主进程，接收任务进程，执行任务进程，监听回收进程，进程间通信!\n\n\n\n","categories":["swoole","基础了解"],"tags":["swoole"]},{"title":"Git 版本切换","url":"/2021/03/07/Git-%E7%89%88%E6%9C%AC%E5%88%87%E6%8D%A2/","content":"主要内容：\n1） HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id。2）用git log可以查看提交历史，可以查询到我们要返回版本的ID。3）版本回退之后，需要再次回到会退前，可以用git reflog查看命令历史，可以查看到每次命令的记录，里面会有我们需要的版本ID。\n\n一： 按次回退HEAD表示当前版本，回退到上一个版本用：git reset --hard HEAD^\n回退到上上一个版本，使用：git reset --hard HEAD^^\n回退到20个版本之前，使用：git reset --hard HEAD~20\n二：指定commit_id有时候，提交的东西多了git log 查看记录git reflog 查看历史记录\n回退到指定版本：$ git reset --hard 52602b0\n\n只需要输入7位 ID 即可\n\n\n相关资料：\n\nGit 版本前后切换|博客园|codingOrange\n\n","categories":["Git"]},{"title":"Git 配置与介绍","url":"/2021/03/07/Git-%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BB%8B%E7%BB%8D/","content":"Github一、安装配置\n安装 \n访问网址 Git-download\nlinux Git-linux\n # yum install git (up to Fedora 21)\n # dnf install git(Fedora 22 and later)\n\n\n\n\n配置\n第一次使用需要进行用户配置\n# git config --global user.name &quot;username&quot;(不支持中文)\n# git config --global user.email &quot;useremail&quot;\n查看配置结果# git config --list\n\n\n\n\n\n二、认识Git\ngit记录的是什么\n\n\n![431e79f8.png]传统的版本控制器如svn工作原理，则是记录文件的每次改动\n\n\n\n\n![6c92b049.png]Git则是每个版本都保存一次，形成一个分支\n普通的程序员是把很多时间放在写代码和调bug上，而优秀的程序员是将更多的经历放在设计上。\n\n\n\ngit的工作流程\n\ngit流程\n本地：在工作目录中添加、修改文件\n暂存区-本地：将需要进行版本管理的文件放入暂存区\n提交：将暂存区的文件提交到Git仓库\n\n\ngit管理文件的三种状态\n已修改 (modified)\n已暂存 (staged)\n已提交 (committed)\n\n\n\n\n![8f8a0fbb.png]\n\n\n\n三、使用\nGit -生成 -添加 -提交\n\n# git init即可在当前项目中生成一个.git目录\n# git add README.md 文件添加到暂存区(本地必须存在该文件)。文件编码：utf-8notBOM\n# git commit -m &quot;add a readme file&quot;提交文件到仓库，””中为本次提交说明信息[1]\n# git log 查看历史提交记录,从近到远排序，commit后为提交的唯一hashId Author提交作者，Date提交时间，以及提交说明 \n\n\nGit -查看状态\n\n# git status 查看git状态，出现的提示[2]\n文件的两种状态[3]\n\n\nGit -取消暂存\n\n# git reset HEAD &lt;file&gt;... 取消还未提交文件的暂存状态，不指定文件则将当前所有暂存状态文件全部取消暂存状态\n\n\n\n\nGit -取消修改\n\n[!] # git checkout -- &lt;file&gt; 将仓库最近一次提交的file覆盖本地file\n\n\nGit -查看历史记录\n\n# git reflog 查看git历史记录\n\n\n\n四、Git -reset![5d67d3bb.png]\n\nGIT -reset\n# git reset HEAD &lt;file&gt;... \n取消还未提交文件的暂存状态，不指定文件则将当前所有暂存状态文件全部取消暂存状态\n仅对暂存区文件有效\n\n\n# git reset --mixed HEAD~\n--mixed默认指令，不加也可\n移动HEAD[4]的指向，将其指向指定的快照[5]\n将HEAD(指针)移动后指向的快照 回滚到暂存区，工作目录不受影响\n\n\n# git reset --soft HEAD~\n--soft软回滚\n移动HEAD的指向，将其指向上一个快照\n将指定版本的提交，回滚到暂存区，相当于撤销指定版本的一次提交\n\n\n# git reset --hard HEAD~\n--hard强制回滚\n移动HEAD的指向，将其指向指定的快照\n将HEAD指向的快照回滚到暂存区，同时将暂存区的文件还原到工作目录\n相当于本地、暂存区完全回滚到指定快照(版本)\n**会覆盖本地文件，删除版本中没有文的件**\n\n\n\n\nGit -回滚指定快照\n~ 可换成指定Hashid，一般输入Hashid不少于5位即可识别\n# git reset Hashid,只要知道某版本的Hashid，就可以回滚到暂存区，如果加上--hard,就会直接回滚到工作目录中\n\n\nGit -回滚个别文件\n# git reset 版本快照 文件名/路径因为没有HEAD指令，所以不会移动HEAD   \n\n\n\n\n1.如果提交无误，则会返回【create mode 100644 readme.md】,其中100表示文件为普通文件，644表示权限 ↩2.'on branch master' 表示处于一个分支上；'Untracked files'表示下面红色的文件/文件夹是没有添加到暂存区的；'changes to be committed'表示新添加到暂存区的文件 ↩3.当一个文件已经被添加到暂存区(HEAD)后，这时再修改该文件，# git status就会看到该文件的两种状态，一个未提交到仓库(绿色)，一个未添加到暂存区。 ↩4.这里的HEAD表示指针，表示指向某个分支。HEAD~表示指向上一个分支，并覆盖本地文件HEAD~~表示回退2个版本，也可使用HREAD~2表示 ↩5.版本 ↩5.每一个版本称为一个快照 ↩","categories":["Git"]},{"title":"MySQL常见的三种存储引擎（InnoDB、MyISAM、MEMORY）","url":"/2021/03/07/MySQL%E5%B8%B8%E8%A7%81%E7%9A%84%E4%B8%89%E7%A7%8D%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E%EF%BC%88InnoDB%E3%80%81MyISAM%E3%80%81MEMORY%EF%BC%89/","content":"\n\n转载：MySQL常见的三种存储引擎（InnoDB、MyISAM、MEMORY） |博客园 my笔触作者：于果\n\nMySQL是我们经常使用的数据库处理系统（DBMS），不知小伙伴们有没有注意过其中的“存储引擎”（storage_engine）呢？有时候面试题中也会问道MySQL几种常用的存储引擎的区别。这次就简短侃一下存储引擎那些事儿。\n\n\n引擎（Engine）是电子平台上开发程序或系统的核心组件。利用引擎，开发者可迅速建立、铺设程序所需的功能，或利用其辅助程序的运转。一般而言，引擎是一个程序或一套系统的支持部分。常见的程序引擎有游戏引擎，搜索引擎，杀毒引擎等。\n\nOk，我们知道了，引擎就是一个程序的核心组件。\n简单来说，存储引擎就是指表的类型以及表在计算机上的存储方式。\n存储引擎的概念是MySQL的特点，Oracle中没有专门的存储引擎的概念，Oracle有OLTP和OLAP模式的区分。不同的存储引擎决定了MySQL数据库中的表可以用不同的方式来存储。我们可以根据数据的特点来选择不同的存储引擎。\n在MySQL中的存储引擎有很多种，可以通过“SHOW ENGINES”语句来查看。下面重点关注InnoDB、MyISAM、MEMORY这三种。\n一.InnoDB存储引擎\nInnoDB给MySQL的表提供了事务处理、回滚、崩溃修复能力和多版本并发控制的事务安全。在MySQL从3.23.34a开始包含InnnoDB。它是MySQL上第一个提供外键约束的表引擎。而且InnoDB对事务处理的能力，也是其他存储引擎不能比拟的。靠后版本的MySQL的默认存储引擎就是InnoDB。\nInnoDB存储引擎总支持AUTO_INCREMENT。自动增长列的值不能为空，并且值必须唯一。MySQL中规定自增列必须为主键。在插入值的时候，如果自动增长列不输入值，则插入的值为自动增长后的值；如果输入的值为0或空（NULL），则插入的值也是自动增长后的值；如果插入某个确定的值，且该值在前面没有出现过，就可以直接插入。\nInnoDB还支持外键（FOREIGN KEY）。外键所在的表叫做子表，外键所依赖（REFERENCES）的表叫做父表。父表中被字表外键关联的字段必须为主键。当删除、更新父表中的某条信息时，子表也必须有相应的改变，这是数据库的参照完整性规则。\nInnoDB中，创建的表的表结构存储在_.frm_文件中（我觉得是frame的缩写吧）。数据和索引存储在innodb_data_home_dir和innodb_data_file_path定义的表空间中。\nInnoDB的优势在于提供了良好的事务处理、崩溃修复能力和并发控制。缺点是读写效率较差，占用的数据空间相对较大。\n二.MyISAM存储引擎\nMyISAM是MySQL中常见的存储引擎，曾经是MySQL的默认存储引擎。MyISAM是基于ISAM引擎发展起来的，增加了许多有用的扩展。\nMyISAM的表存储成3个文件。文件的名字与表名相同。拓展名为_frm、MYD、MYI_。其实，frm文件存储表的结构；MYD文件存储数据，是MYData的缩写；MYI文件存储索引，是MYIndex的缩写。\n基于MyISAM存储引擎的表支持3种不同的存储格式。包括静态型、动态型和压缩型。其中，静态型是MyISAM的默认存储格式，它的字段是固定长度的；动态型包含变长字段，记录的长度不是固定的；压缩型需要用到myisampack工具，占用的磁盘空间较小。\nMyISAM的优势在于占用空间小，处理速度快。缺点是不支持事务的完整性和并发性。\n三.MEMORY存储引擎\nMEMORY是MySQL中一类特殊的存储引擎。它使用存储在内存中的内容来创建表，而且数据全部放在内存中。这些特性与前面的两个很不同。\n每个基于MEMORY存储引擎的表实际对应一个磁盘文件。该文件的文件名与表名相同，类型为_frm_类型。该文件中只存储表的结构。而其数据文件，都是存储在内存中，这样有利于数据的快速处理，提高整个表的效率。值得注意的是，服务器需要有足够的内存来维持MEMORY存储引擎的表的使用。如果不需要了，可以释放内存，甚至删除不需要的表。\nMEMORY默认使用哈希索引。速度比使用B型树索引快。当然如果你想用B型树索引，可以在创建索引时指定。\n注意，MEMORY用到的很少，因为它是把数据存到内存中，如果内存出现异常就会影响数据。如果重启或者关机，所有数据都会消失。因此，基于MEMORY的表的生命周期很短，一般是一次性的。\n四.怎样选择存储引擎\n在实际工作中，选择一个合适的存储引擎是一个比较复杂的问题。每种存储引擎都有自己的优缺点，不能笼统地说谁比谁好。\n\nInnoDB：支持事务处理，支持外键，支持崩溃修复能力和并发控制。如果需要对事务的完整性要求比较高（比如银行），要求实现并发控制（比如售票），那选择InnoDB有很大的优势。如果需要频繁的更新、删除操作的数据库，也可以选择InnoDB，因为支持事务的提交（commit）和回滚（rollback）。\nMyISAM：插入数据快，空间和内存使用比较低。如果表主要是用于插入新记录和读出记录，那么选择MyISAM能实现处理高效率。如果应用的完整性、并发性要求比 较低，也可以使用。\nMEMORY：所有的数据都在内存中，数据的处理速度快，但是安全性不高。如果需要很快的读写速度，对数据的安全性要求较低，可以选择MEMOEY。它对表的大小有要求，不能建立太大的表。所以，这类数据库只使用在相对较小的数据库表。\n注意，同一个数据库也可以使用多种存储引擎的表。如果一个表要求比较高的事务处理，可以选择InnoDB。这个数据库中可以将查询要求比较高的表选择MyISAM存储。如果该数据库需要一个用于查询的临时表，可以选择MEMORY存储引擎。\n__EOF__","categories":["MySql"]},{"title":"MySQL数据库崩溃","url":"/2021/03/07/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B4%A9%E6%BA%83/","content":"错误：某台服务器下的网站能访问，但是所有的网站数据库都不能连接\n使用PHPmyadmin 提示#2003 无法登录 MySQL 服务器\n\nERROR 2003(HYO00):Can’t connect to MySQL server on ‘localhost’(10061)\n\n原因：数据库崩溃\n解决：\n重启数据库\n\n\nwin：cmd中；(在没有数据库管理软件，且不愿意重启服务器时)输入 tasklist | findstr mysql 查看进程状态输入 net start mysql 启动进程net stop mysql  结束进程\n\n若提示服务名无效，在MySql/bin/目录，执行命令：mysqld -install 即可卸载同上 mysqld --remove mysql\n\n\nLinux：systemctl status mysql        查看进程状态systemctl restart mysql        重启systemctl stop mysql           停止systemctl start mysql           启动\n或者重启服务器(开关机的那种，前提是，各项服务设置过开机启动)\n\n\n相关资料：\n\nwindows下Mysql安装启动及常用操作\n\n","categories":["MySql"]},{"title":"MySql row_number()序号函数","url":"/2021/07/22/MySql-row-number-%E5%BA%8F%E5%8F%B7%E5%87%BD%E6%95%B0/","content":"row_number函数简介row_number()是一个排名函数，它返回一行的序号，从第一行的1开始。为结果集中的每一行或每组行添加唯一编号。\n\n要求MySQL：8.0\n\n不过幸运的是，低版本的MySQL提供了可用于模拟row_number()函数的会话变量。\n下面将演示原版和模拟两种方式\nMySql 8.0 原生写法\nROW_NUMBER() OVER (&lt;partition_definition&gt; &lt;order_definition&gt;) \n\n常见用法：为行分配序号以下语句使用ROW_NUMBER()函数为products表中的每一行分配一个序号：\nSELECT  ROW_NUMBER() OVER ( ORDER BY productName ) row_num,    productName,    msrpFROM  productsORDER BY  productName;  # 这是输出+---------+---------------------------------------------+--------+| row_num | productName                                 | msrp   |+---------+---------------------------------------------+--------+|       1 | 18th century schooner                       | 122.89 ||       2 | 18th Century Vintage Horse Carriage         | 104.72 ||       3 | 1900s Vintage Bi-Plane                      |  68.51 ||       4 | 1900s Vintage Tri-Plane                     |  72.45 ||       5 | 1903 Ford Model A                           | 136.59 ||       6 | 1904 Buick Runabout                         |  87.77 ||       7 | 1911 Ford Town Car                          |  60.54 ||       8 | 1912 Ford Model T Delivery Wagon            |  88.51 ||       9 | 1913 Ford Model T Speedster                 | 101.31 ||      10 | 1917 Grand Touring Sedan                    | 170.00 ||      11 | 1917 Maxwell Touring Car                    |  99.21 ||      12 | 1926 Ford Fire Engine                       |  60.77 ||      13 | 1928 British Royal Navy Airplane            | 109.42 |...\n\n更多语法见MySQL ROW_NUMBER 函数\n模拟 row_number()** 方法一 **\n要模拟row_number()函数，您必须在查询中使用会话变量。\n以下语句从employees表中获取5名员工，并从1开始为每行添加行号。\nSET @row_number &#x3D; 0;SELECT\t( @row_number :&#x3D; @row_number + 1 ) AS num,\tfirstName,\tlastName FROM\temployees \tLIMIT 5;     # 这是输出+------+-----------+-----------+| num  | firstName | lastName  |+------+-----------+-----------+|    1 | Diane     | Murphy    ||    2 | Mary      | Phan      ||    3 | Jeff      | Firrelli  ||    4 | William   | Patterson ||    5 | Gerard    | Bondur    |+------+-----------+-----------+5 rows in set (0.00 sec)\n在上面的陈述中：\n\n在第一个语句中，我们定义了一个名为的变量 row_number，并将其值设置为0.这row_number是由@前缀指示的会话变量。\n在第二个语句中，我们从employees表中选择数据，并将每行的  row_number变量值增加到1。LIMIT子句用于约束返回的行数，在这种情况下，它被设置为5。\n\n** 方法二 **另一种技术是使用会话变量作为派生表，并将其与主表交叉连接。请参阅以下查询：\nSELECT     (@row_number:&#x3D;@row_number + 1) AS num, firstName, lastNameFROM    employees,(SELECT @row_number:&#x3D;0) AS tLIMIT 5; # 这是输出+------+-----------+-----------+| num  | firstName | lastName  |+------+-----------+-----------+|    1 | Diane     | Murphy    ||    2 | Mary      | Phan      ||    3 | Jeff      | Firrelli  ||    4 | William   | Patterson ||    5 | Gerard    | Bondur    |+------+-----------+-----------+5 rows in set (0.00 sec)\n请注意，派生表必须具有自己的别名，以使查询在语法上正确。\n更多语法见MySQL 添加序号\n\n参考资料：\n\nMySQL ROW_NUMBER 函数\nMySQL 添加序号\n力扣|图解SQL面试题：经典排名问题\n\n","categories":["MySql"],"tags":["MySql"]},{"title":"NERD Commenter","url":"/2021/03/07/NERD-Commenter/","content":"\n转载：vim插件之 NERD Commenter作者：_扬帆起航\n\n【插件使用】注：这里已经将””改为”,”\n简单介绍下NERD Commenter的常用键绑定，以C/C++文件为例，详析的使用方法，请:h NERDCommenter。在Normal或者Visual 模式下：\n经测试，想要下面的命令生效，需要将光标置于每行的空白处，也就是说光标上不能有字符。\n\n\\ca 在可选的注释方式之间切换，比如C/C++ 的块注释/* */和行注释//\\cc 注释当前行\\c 切换注释/非注释状态\\cs 以”性感”的方式注释\\cA 在当前行尾添加注释符，并进入Insert模式\\cu 取消注释Normal模式下，几乎所有命令前面都可以指定行数。 比如 输入 6,cs 的意思就是以性感方式注释光标所在行开始6行代码Visual模式下执行命令，会对选中的特定区块进行注释/反注释\n\n此外，其它的nerdcommenter命令可以在NORMAL模式下输入命令 :map 看到。 下面是我的截图\n\n注：再次说明，各命令前缀是可以自己设置的，通常是逗号’,’或者’\\’.\n注：看名字可以知道，它和The NERD Tree同属一个作者A mind needs books like a sword needs a whetstone.\n【插件介绍】这是一款用于快速高效注释代码的插件\n使用这款插件，你可以对多种文件类型的文件进行不同方式地、快速地注释。这对使用Vim来写代码或者修改配置文件的同学来说，无疑是提升效率和快感的一件利器。\n【插件安装】我总结了三种安装方法\n(1). 在bundle中安装\n　会使用Bundle管理vim插件的朋友都知道，只要加入以下代码，即可。  Bundle &#39;The-NERD-Commenter&#39;  或者Bundle&#39;scrooloose/nerdcommenter&#39;\n（2）直接下载你可以到这里来下载这个插件，将压缩包里面的doc/和plugin/文件夹丢到~/.vim/下面就是安装了。为了可以使用其帮助文档，你还需要在Vim中执行:helptags ~/.vim/doc/来注册。\n【插件配置】如果想把默认的leader从“\\”改为“,”， 则在在配置文件.vimrc中，加入下面一行let mapleader=&quot;,&quot;\n","categories":["Vim"]},{"title":"NPM 基本用法介绍","url":"/2021/04/05/NPM-%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95%E4%BB%8B%E7%BB%8D/","content":"npm是node js工程管理的工具，在一个大的node js项目可能中有着许多第三方的包和库，如vue、angular、react、webpack等。我们就可以使用npm进行安装删除等管理操作。\n另外在我们把项目分享给他人时，只需要上传核心代码，依赖包和库他人就直接使用npm下载就可以了。\n\n安装包\n\n 全局安装：#npm install -g PackName    &gt; 1. #npm install -g create-react-app    &gt; 这时电脑中就有了一个react的全局安装包，当在某个项目需要时，就可以使用#create-react-app react-helloworld在该处创建一个’react-hellowworld’的项目文件夹。进入该文件夹输入npm start[^start]启动访问    &gt; 2. install 可简写为 i #npm i -g packname                  提示无法加载….\\npm\\xxx.ps1因为在此系统上禁止运行脚本…                1.以管理员方式打开powershell      2.运行命令：set-ExecutionPolicy RemoteSigned      3.出现：         执行策略更改         执行策略可帮助你防止执行不信任的脚本。更改执行策略可能会产生安全风险，如 https:/go.microsoft.com/fwlink/?LinkID=135170 中的 about_Execution_Policies 帮助主题所述。是否要更改执行策略?         [Y] 是(Y) [A] 全是(A) [N] 否(N) [L] 全否(L) [S] 暂停(S) [?] 帮助 (默认值为“N”):      4. 输入：Y 即可      5. 来自：无法加载ps1文件 博客园          \n   局部安装：#npm install PackName --save\n\n在测试某些包时，我们可以通过 #npm init -y来新建项目进行测试[^test]\n\n\n\n\n\n查看包\n\n   查看全局：#npm list -g --depth 0     &gt; -g:global     &gt; --depth 0:深度0，所有项目只展示一级   查看当前：#npm list --depth 0\n\n   \n 3. 删除包\n  **删除**：#`#npm uninstall PackName`\n  \n\n\n\n安装特定版本包\n\n  删除：##npm i PackName@0.26.0    &gt; @0.26.0:在包名后加@+特定版本就可以下载特定版本的包\n\n   \n\n\n\nNPM 基本用法介绍 | Node.js 入门 JavaScript_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili\n\n注释\n[^start]:这里的npm start 指令在当前目录’package.json’ 中 “scripts”行，不同的包启动指令不一样，可自定义\n[^test]:比如我们要测试ramda这个包，我们先新建一个文件夹‘node-test’,再运行#npm init -y,在‘node-test’下创建一个package.josn文件，打开后在[script]行中添加&quot;start&quot;: &quot;node index.js&quot;,然后目录下创建 index.js 文件，这样就会直接启动 index.js文件；再运行 #npm i --save ramda,并在index.js中写入const R = require(&quot;ramda&quot;);console.log(R.add(1,5));运行 #npm start即可查看结果\n","categories":["npm"]},{"title":"No input file specified","url":"/2021/03/07/No-input-file-specified/","content":"nginx解决NGINX PHP “No input file specified”\napacheno input file specified 三种解决方法打开.htaccess 在RewriteRule 后面的index.php教程后面添加一个“?”\n完整代码如下\n# /www.xx.com/.htaccess RewriteEngine onRewriteCond %&#123;Request_FILENAME&#125; !-fRewriteCond $1 !^(index.php|images|robots.txt)RewriteRule ^(.*)$ /index.php?/$1 [L]\n\n如果是apache服务器出问题，看看是不是的Apache 把 .php 后缀的文件解析哪里有问题了。\n总结\nApache 将哪些后缀作为 PHP 解析。例如，让 Apache 把 .php 后缀的文件解析为PHP。可以将任何后缀的文件解析为 PHP，只要在以下语句中加入并用空格分开。这里以添加一个 .phtml 来示例。\nAddType application/x-httpd-php .php .phtml\n为了将 .phps教程作为 PHP 的源文件进行语法高亮显示，还可以加上：\nAddType application/x-httpd-php-source .phps\n用通常的过程启动 Apache(必须完全停止 Apache 再重新启动，而不是用 HUP 或者USR1 信号使 Apache 重新加载)。\n","categories":["Apache"]},{"title":"PHP has encountered an Access Violation","url":"/2021/04/06/PHP-has-encountered-an-Access-Violation-at-0416B2AF/","content":"遇到一个报错\n\nPHP has encountered an Access Violation at 0416B2AF\n\n配置为：\n\nphp 5.3.2\nwindows 2008 R2\nmysql 5.7 \nIIS7\n\n解决根据关于PHP has encountered an Access Violation问题的处理这篇文章列举的可能\n突然想到公司iis从来没有计划回收过，遂重启iis并回收应用池，完美解决\n","categories":["IIS"]},{"title":"Playwright","url":"/2021/03/07/Playwright/","content":"\n转载：微软开源最强Python自动化神器Playwright！不用写一行代码！作者：Python数据科学\n\n相信玩过爬虫的朋友都知道selenium，一个自动化测试的神器工具。写个Python自动化脚本解放双手基本上是常规的操作了，爬虫爬不了的，就用自动化测试凑一凑。\n虽然selenium有完备的文档，但也需要一定的学习成本，对于一个纯小白来讲还是有些门槛的。\n最近，微软开源了一个项目叫「playwright-python」，简直碉堡了！这个项目是针对Python语言的纯自动化工具，连代码都不用写，就能实现自动化功能。\n\n可能你会觉得有点不可思议，但它就是这么厉害。下面我们一起看下这个神器。\n1. Playwright介绍Playwright是一个强大的Python库，仅用一个API即可自动执行 Chromium、Firefox、WebKit等主流浏览器自动化操作，并同时支持以无头模式、有头模式运行。\nPlaywright提供的自动化技术是绿色的、功能强大、可靠且快速，支持Linux、Mac以及Windows操作系统。\n2.Playwright使用安装Playwright的安装非常简单，两步走。\n# 安装playwright库pip install playwright# 安装浏览器驱动文件（安装过程稍微有点慢）python -m playwright install\n上面两个pip操作分别安装：\n\n安装Playwright依赖库，需要Python3.7+\n安装Chromium、Firefox、WebKit等浏览器的驱动文件\n\n录制使用 Playwright 无需写一行代码，我们只需手动操作浏览器，它会录制我们的操作，然后自动生成代码脚本。\n下面就是录制的命令codegen，仅仅一行。\n# 命令行键入 --help 可看到所有选项python -m playwright codegen\ncodegen 的用法可以使用 --help 查看，如果简单使用就是直接在命令后面加上url链接，如果有其他需要可以添加options。\npython -m playwright codegen --helpUsage: index codegen [options] [url]open page and generate code for user actionsOptions:  -o, --output &lt;file name&gt;  saves the generated script to a file  --target &lt;language&gt;       language to use, one of javascript, python, python-async, csharp (default: &quot;python&quot;)  -h, --help                display help for commandExamples:  $ codegen  $ codegen --target=python  $ -b webkit codegen https://example.com\noptions含义：\n-o：将录制的脚本保存到一个文件\n\n–target：规定生成脚本的语言，有JS和Python两种，默认为Python\n\n-b：指定浏览器驱动\n\n比如，我要在 baidu.com 搜索，用chromium驱动，将结果保存为my.py的python文件。\npython -m playwright codegen --target python -o &#39;my.py&#39; -b chromium https://www.baid\n命令行输入后会自动打开浏览器，然后可以看见在浏览器上的一举一动都会被自动翻译成代码，如下所示。结束后自动关闭浏览器，保存生成的自动化脚本到py文件。\nfrom playwright import sync_playwrightdef run(playwright):    browser = playwright.chromium.launch(headless=False)    context = browser.newContext()    # Open new page    page = context.newPage()    page.goto(&quot;https://www.baidu.com/&quot;)    page.click(&quot;input[name=\\&quot;wd\\&quot;]&quot;)    page.fill(&quot;input[name=\\&quot;wd\\&quot;]&quot;, &quot;jingdong&quot;)    page.click(&quot;text=\\&quot;京东\\&quot;&quot;)      # Click //a[normalize-space(.)=&#x27;京东JD.COM官网 多快好省 只为品质生活&#x27;]    with page.expect_navigation():        with page.expect_popup() as popup_info:            page.click(&quot;//a[normalize-space(.)=&#x27;京东JD.COM官网 多快好省 只为品质生活&#x27;]&quot;)        page1 = popup_info.value    # ---------------------    context.close()    browser.close()with sync_playwright() as playwright:    run(playwright)\n\n此外，playwright还提供了同步和异步的API接口，文档如下。\n\n链接：https://microsoft.github.io/playwright-python/index.html\n\n同步下面示例代码：依次打开三个浏览器，前往baidu搜索，截图后退出。\nfrom playwright import sync_playwrightwith sync_playwright() as p:    for browser_type in [p.chromium, p.firefox, p.webkit]:        browser = browser_type.launch()        page = browser.newPage()        page.goto(&#x27;https://baidu.com/&#x27;)        page.screenshot(path=f&#x27;example-&#123;browser_type.name&#125;.png&#x27;)        browser.close()\n\n异步异步操作可结合asyncio同时进行三个浏览器操作。\nimport asynciofrom playwright import async_playwrightasync def main():    async with async_playwright() as p:        for browser_type in [p.chromium, p.firefox, p.webkit]:            browser = await browser_type.launch()            page = await browser.newPage()            await page.goto(&#x27;http://baidu.com/&#x27;)            await page.screenshot(path=f&#x27;example-&#123;browser_type.name&#125;.png&#x27;)            await browser.close()asyncio.get_event_loop().run_until_complete(main())\n\n移动端更厉害的是，playwright还可支持移动端的浏览器模拟。下面是官方文档提供的一段代码，模拟在给定地理位置上手机iphone 11 pro上的Safari浏览器，首先导航到maps.google.com，然后执行定位并截图。\nfrom playwright import sync_playwrightwith sync_playwright() as p:    iphone_11 = p.devices[&#x27;iPhone 11 Pro&#x27;]    browser = p.webkit.launch(headless=False)    context = browser.newContext(        **iphone_11,        locale=&#x27;en-US&#x27;,        geolocation=&#123; &#x27;longitude&#x27;: 12.492507, &#x27;latitude&#x27;: 41.889938 &#125;,        permissions=[&#x27;geolocation&#x27;]    )    page = context.newPage()    page.goto(&#x27;https://maps.google.com&#x27;)    page.click(&#x27;text=&quot;Your location&quot;&#x27;)    page.screenshot(path=&#x27;colosseum-iphone.png&#x27;)    browser.close()\n另外，还可以配合pytest插件一起使用，感兴趣可以自己试一下。\n总结playwright相比已有的自动化测试工具有很多优势，比如：\n\n跨浏览器，支持Chromium、Firefox、WebKit\n跨操作系统，支持Linux、Mac、Windows\n可提供录制生成代码功能，解放双手\n可用于移动端\n\n目前存在的缺点就是生态和文档还不是非常完备，比如没有API中文文档、没有较好的教程和示例供学习。不过相信，随着知道的人越来越多，未来会越来越好。\n\nGitHub链接：https://github.com/microsoft/playwright-python开源组织：Microsoft\n\n","categories":["Python"]},{"title":"adb使用指令","url":"/2021/06/21/adb%E4%BD%BF%E7%94%A8%E6%8C%87%E4%BB%A4/","content":"adb使用指令线刷：1.进入f:/adb/platform-tools/,按住shift + 鼠标右键，选择shell\n2.确认设备开启了usb调试，并usb连接了电脑\n3.shell中输入adb devices,等待提示\n* daemon started successfully20080411        device\n4.挂载系统，adb remount 否则不能对文件读写\n5.adb shell,进入手机shell。\n\n如果符号为  $  ，则没有root，输入su获得权限如果符号为  #  ，则为root\n\n6.安卓手机shell为linux系统内核,相关操作同Linux\nps:\n\n如果一个目录含有空格如 【./a not run/】则进入该目录要加引号cd &#39;./a not run&#39;或者cd /system/app&#39;/a not run/&#39;\n\n","categories":["adb"],"tags":["adb"]},{"title":"apache 无法读取index.html","url":"/2021/03/07/apache-%E6%97%A0%E6%B3%95%E8%AF%BB%E5%8F%96index-html/","content":"问题在测试一个功能时，建立子站，里面全是静态文件，使用 Apache 链接到该项目目录，访问时，却提示 500 Internal Server Error\n检查 Apache 配置文件，并没有问题，在 URL 链接后加上 index.html 就能正常访问\n解决在 stackoverflow 看到相似的问题.htaccess DirectoryIndex不起作用，其中一位老哥的回答\n\nYou have to check if there is any htaccess rule on parent directory that conflics with this rule, my problem was that, having a RewriteEngine on root directory and “/folder/“ DirectoryIndex won’t work.\n您必须检查在父目录上是否有任何htaccess规则与此规则相冲突，我的问题是，在根目录和“ / folder /” DirectoryIndex上具有RewriteEngine将不起作用。\n\n\n修改父级 .htaccess在 RewriteCond 中添加 子站的目录html添加前:RewriteCond $1  !^(index\\.php|image|robots\\.txt|favicon\\.ico)添加后:RewriteCond $1 !^(index\\.php|image|robots\\.txt|favicon\\.ico|html)\n\n子站根目录下 添加首页访问规则在子站 html 根目录下新建 .htaccess ,输入以下内容DirectoryIndex index.html index.htm\n\n查看 Apache 是否开启重写找到 Apache 软件所在目录\n\n\n\n如果你是单个网站，且没有添加过网站对应的 .conf 文件\n\n编辑 apache/conf/httpd.conf ，修改AllowOverride None 为 AllowOverride All\n\n\n如果有多个网站，且每个网站都有对应的 .conf 文件,如我当前项目的为test,端口为80，则网站配置文件为test_80.conf\n\n编辑 apache/conf/vhosts/test_80.conf ,修改AllowOverride None 为 AllowOverride All,没有则添加\n\n\n\n\n相关资料:\n\n.htaccess DirectoryIndex不起作用 |stackoverflow\nApache Core Features\n\n","categories":["Apache"]},{"title":"apache多版本PHP配置","url":"/2021/03/07/apache%E5%A4%9A%E7%89%88%E6%9C%ACPHP%E9%85%8D%E7%BD%AE/","content":"导言windows 用户见windows - apache 配置多个版本的 php\n因为项目需要，要在 Linux 上使用apache 部署多个 PHP 项目，且 不同项目的要用到不同的 PHP 版本，因此在这里记录下。\n\nLinux：CentOS7\nApache：2.4\nPHP : 5.6 需要安装7.4\n\n步骤服务器使用的是阿里云的，里面已经集成了 Apache &amp; PHP5.6，可以直接使用他们配置的文件，这里只需要安装PHP7即可\n一、安装PHP7.4\n访问php官网下载列表，找到PHP7.4,复制其下载链接。\n阿里默认PHP安装在 /usr/local/ ,进入该目录，并下载PHP7.4到该目录\n\n#下载安装包$ cd /usr/local/$ wget https://www.php.net/distributions/php-7.4.15.tar.gz#解压$ tar -zxvf php-7.4.15.tar.gz#检查当前的环境是否满足要安装软件的依赖关系$ cd php-7.4.15#设置安装目录并编译检查依赖#可用 ./configure --help 查看当前版本的可选项#注意参数中有  多个  php设置路径./configure --prefix=/usr/local/php74 --with-config-file-path=/usr/local/php74 --enable-mysqlnd --with-mysqli=mysqlnd --with-pdo-mysql=mysqlnd --with-iconv-dir --with-freetype --with-jpeg --with-zlib --enable-xml --disable-rpath --enable-bcmath --enable-shmop --enable-sysvsem --enable-inline-optimization --with-curl --enable-mbregex --enable-mbstring --enable-intl --enable-ftp --enable-gd --with-external-gd --with-openssl --with-mhash --enable-pcntl --enable-sockets --with-xmlrpc --enable-soap --with-gettext --disable-fileinfo --enable-opcache --with-sodium --with-webp --enable-fpm\n\n\n注意编译时安装路径的设置上面的参数除了PHP程序的安装路径，还有其配置文件的路径如果路径错误，会导致php无法正常运行，并且难以察觉更多的选项见 ./configure --helpphp编译参数注解(该链接内容仅作参考，以./configure –help为准)\n提示 Package ‘xxxx’, required by ‘virtual:world’, not foundphp 源码安装常见问题汇总Installing Libsodium\n\n当出现下面的界面，则表示安装成功\n#测试编译$ make$ make test#(1)如果检查时出现某些依赖没有安装，则需要单独安装，不然会出现#make: *** No targets specified and no makefile found. Stop#(2)编译成功后出现某某选项无法识别#configure: WARNING: unrecognized options:...#见底部 相关资料#安装make install\n\n\n配置PHP.ini。 在之前编译的源码包中，找到 php.ini-production，复制到/usr/local/php下，并改名为php.inicp php.ini-production /usr/local/php74/php.ini\n\n [cgi]修改配置文件php.ini vim /usr/local/php74/php.ini#修改cgi.fix_pathinfo=0 见 为什么php.ini设置cgi.fix_pathinfo=0\n **[可选项]**设置让PHP错误信息打印在页面上 $ vim /usr/local/php74/php.inidisplay_errors = off 将 Off 改成 On\n\n配置php-fpm#修改php-fpm配置文件：$ cd /usr/local/php74/etc$ cp php-fpm.conf.default php-fpm.conf$ vim php-fpm.conf#去掉 pid = run/php-fpm.pid 前面的分号#开启错误日志，否则无法运行php-fpm#阿里云有配置过日志目录，因此使用 find / -name php-fpm.log 即可找到日志保存目录\n配置www.conf$ cd php-fpm.d$ cp www.conf.default www.conf$ vim www.conf#(1)更改侦听端口为9001(9000 为默认端口)#(2)修改用户和组为当前用户(默认会添加nobody这个用户和用户组)\n\n\n \n\n测试php-fpm是否安装成功 #启动 php74 内的 php-fpm/usr/local/php74/sbin/php-fpm #看是否有报错，没有任何提示，则说明 fpm 安装配置无误\n\n 查看是否启动成功 ps aux|grep php \n\n添加 php-fpm 到系统服务内 #将 fpm 管理程序放入系统 $ cp /usr/local/php-7.4.15/sapi/fpm/init.d.php-fpm /etc/init.d/php74-fpm#添加可执行权限 $ chmod +x /etc/init.d/php74-fpm\n\n 设置开机启动 chkconfig --add /etc/init.d/php74-fpm\n 更多命令 service php74-fpm start #启动service php74-fpm restart #重启service php74-fpm stop #停止\n\nphp-fpm配置文件参数解释见 脚本之家|配置php-fpm参数及配置详解\n\n需要注意的地方\n\n./configure 编译参数时，使用 ./configure --help查看当前版本的编译参数\n编译安装时，设置PHP安装路径有两种方式,见Linux下指定pip install和make install安装路径\n并没有找到一个 fpm 管理多个 php 的办法,因此启动多版本PHP需要多个相应的 fpm\n\n配置apache\n安装mod_fcgid.so,该模块可以支持 apache 运行多版本的 php.\n\n\n请根据apache版本选择对应版本的mod_fcgid.so，这里以apache2.4为例\n\n #下载$cd /usr/local/src$ wget https://mirrors.tuna.tsinghua.edu.cn/apache/httpd/mod_fcgid/mod_fcgid-2.3.9.tar.gz#解压安装$ tar -zxvf mod_fcgid-2.3.9.tar.gz$ cd mod_fcgid-2.3.9$ APXS=/usr/local/apache/bin/apxs ./configure.apxs$ make$ make install\n\n\n修改httpd.conf , 安装好该模块后，httpd.conf 会自动添加加载该模块。#备份httpd.conf$ cp /usr/local/apache/httpd.conf /usr/local/apache/httpd.conf.bak#编辑设置 mod_fcgi$ vim /usr/local/apache/conf/httpd.conf#查找是存在mod_fcgid模块/mod_fcgid/#需要其开启，没有则手动添加 LoadModule fcgid_module modules/mod_fcgid.soFcgidMaxProcesses 1000 #php-cgi最大的进程数MaxRequestLen 52428800 #php程序最大文件上传限制50mb 默认为131072（128kb）#读取并运行 php 文件#找到AddType application/x-gzip .gz .tgz#在该行下面添加AddType application/x-httpd-php .php#保存退出:wq!  \n\n\napache php fastcgi模式下，默认上传文件大小只有131072字节（128kb），需要在apache的配置文件中修改fastcgi模式下，在php.ini中修改upload_max_filesize等参数无效。\n\n\n配置虚拟机 $ vim /usr/local/apache/conf/httpd.conf #找到 #Include conf/extra/httpd-vhosts.conf,取消注释#保存退出 $ vim /usr/local/apache/conf/extra/httpd-vhost.conf #里面给出了一个虚拟机配置模板按照该模板配置即可\n\n \n 如图，建立了两个虚拟机，并指定了不同的PHP\n 访问一下 \n 再试试另一个 \n成功\n需要注意的地方\n\n需要添加 AddType application/x-httpd-php .php 才能使解析php文件\napache2.4 允许外部访问 参数简化为 Require all granted,之前版本为AllowOverride AllOrder allow,denyAllow from all\n\n\n相关资料:\n\nLinux 安装php7\ncentos6.5 源码安装php7\ncentos7 编译安装 php7.4\nPackage ‘oniguruma’, required by ‘virtual:world’, not found\nlinux安装php遇到的No package ‘sqlite3’ found，解决方法:yum install sqlite-devel\nCentOS 7编译安装PHP 7.4提示No package ‘libzip’ found或者(libzip &gt;= 0.11)\n安装libsodium库解决libsodium not found问题\n编Installing Libsodium and the PHP extension\nmake: *** No targets specified and no makefile found. Stop\nconfigure: error: Package requirements (sqlite3 &gt; 3.7.4) were not met: No package ‘sqlite3’ found\nconfigure: WARNING: unrecognized options: –with-gd\nLinux下指定pip install和make install安装路径\nphpenv - php多版本配置\nLinux 安装多个php版本并配置\nwindows - apache 配置多个版本的 php\nphp的cgi.fix_pathinfo解析\n配置 php-fpm 时出现’/private/etc/php-fpm.conf’: No such file or directory (2)\n为什么php.ini设置cgi.fix_pathinfo=0\nLinux下apache虚拟主机配置多版本php同时运行\n脚本之家|配置php-fpm参数及配置详解\napache 虚拟目录错误：CustomLog takes two or three arguments, a file name, a custom log format string or format name, and an optional “env=” clause\n\n","categories":["Apache"]},{"title":"fastCGI 意外退出","url":"/2021/03/07/fastCGI-%E6%84%8F%E5%A4%96%E9%80%80%E5%87%BA/","content":"问题系 统：Windows server 2008服务器：IIS7php 5.5\n来自anlondon博客\n解决情况一：程序导致的问题查询资料时，iis7自身是集成了php_pdo.dll的，同时查看服务器其他的项目，都运行正常，说明可能是项目本身的原因，加之iis7与fast-cgi是单线程\n于是重启服务器(开关机的那种)，访问项目其他页面，发现访问正常，只有首页加载很慢且加载不全，查看页面代码，发现因为客户修改后台数据导致程序中出现了一个死循环；\n修改相应的代码，解决。\n情况二：缺失相关文件在iis服务器除了php_pdo外\n进入服务器,查看资源管理器，右键php-cgi.exe-&gt;所在位置\n来自anlondon博客\n双击php.exe、php-cgi.php,出现下面的提示\n来自anlondon博客\n去下载对应版本的php_xxx.dll即可。\n\n相关资料:\n\nphp_pdo.dll下载并配置|脚本之家\n64位IIS7下的PHP 5.4配置及如何连接SQL Server 2008\n“php-cgi.exe - FastCGI 进程意外退出” 的解决办法 |CSDN ltylove2007\nphp pdo drivers won’t load on Windows Server 2008 using IIS Fast-CGI\nGetting Microsoft PHP PDO for SQL Server working |stackOverflow\n\n","categories":["PHP"]},{"title":"git-不同版本pull时报错","url":"/2021/03/07/git-%E4%B8%8D%E5%90%8C%E7%89%88%E6%9C%ACpull%E6%97%B6%E6%8A%A5%E9%94%99/","content":"前提我在家里弄ci-demo,修改了之后上传到coding,回到公司后，想覆盖公司电脑文件细节不一样的版本\npull时报错fatal: refusing to merge unrelated histories\nhttp://anlondon.cn:4000/2021/01/27/git-%E4%B8%8D%E5%90%8C%E7%89%88%E6%9C%ACpull%E6%97%B6%E6%8A%A5/pasted-1.png\n通过博客的讲解，使用git pull origin master --allow-unrelated-historieshttp://anlondon.cn:4000/2021/01/27/git-%E4%B8%8D%E5%90%8C%E7%89%88%E6%9C%ACpull%E6%97%B6%E6%8A%A5/pasted-2.png\nhttp://anlondon.cn:4000/2021/01/27/git-%E4%B8%8D%E5%90%8C%E7%89%88%E6%9C%ACpull%E6%97%B6%E6%8A%A5/pasted-3.png\n最后 手动编辑 保留想要的版本即可\nhttp://anlondon.cn:4000/2021/01/27/git-%E4%B8%8D%E5%90%8C%E7%89%88%E6%9C%ACpull%E6%97%B6%E6%8A%A5/pasted-4.png\nhttp://anlondon.cn:4000/2021/01/27/git-%E4%B8%8D%E5%90%8C%E7%89%88%E6%9C%ACpull%E6%97%B6%E6%8A%A5/pasted-5.png\n","categories":["Git"]},{"title":"git 同时推送到多个远程仓库","url":"/2021/08/16/git-%E5%90%8C%E6%97%B6%E6%8E%A8%E9%80%81%E5%88%B0%E5%A4%9A%E4%B8%AA%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/","content":"\ngit默认远程仓库名为origin\n\ngit remote add oginin xxxx.gitgit remote set-url --add oginin yyyy.git\n![一座浮岛](/2021/08/16/git-同时推送到多个远程仓/pasted-0.png)\n之后push时，就会自动推送到设置的两个远程仓库上\n–参考资料:\n\ngit 本地仓库同时推送到多个远程仓库\n\n","categories":["Git"],"tags":["Git"]},{"title":"git 远程与本地不一致导致的报错","url":"/2021/05/12/git-%E8%BF%9C%E7%A8%8B%E4%B8%8E%E6%9C%AC%E5%9C%B0%E4%B8%8D%E4%B8%80%E8%87%B4%E5%AF%BC%E8%87%B4%E7%9A%84%E6%8A%A5%E9%94%99/","content":"\n报错信息:error:failed to push some refs to …Dealing with “non-fast-forward” errorsFrom time to time you may encounter this error while pushing:$ git push origin masterTo ../remote/\n! [rejected]        master -&gt; master (non-fast forward)\nerror: failed to push some refs to ‘../remote/‘To prevent you from losing history, non-fast-forward updates were rejectedMerge the remote changes before pushing again.  See the ‘non-fast forward’section of ‘git push –help’ for details.\n\n原因是因为远程与本地不一致导致的解决步骤：\n\n需要先拉取远程的\n再手动合并冲突文件\n提交修改\n提交到远程\n\n$git pull origin$git merge origin master   &#x2F;&#x2F;可能提示需要手动合并的文件，根据路径修改保留需要的内容即可$git add .$git commit -m &#39;dev| merge error file&#39;$git push origin\n\n\n参考资料:\n\ngit 不一致 本地和服务器_git 本地与远程仓库不一致\n\n","categories":["Git"]},{"title":"Hello World","url":"/2021/03/06/hello-world/","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new post$ hexo new &quot;My New Post&quot;\n\nMore info: Writing\nRun server$ hexo server\n\nMore info: Server\nGenerate static files$ hexo generate\n\nMore info: Generating\nDeploy to remote sites$ hexo deploy\n\nMore info: Deployment\n"},{"title":"hexo-admin@2.3.0汉化与优化","url":"/2021/03/07/hexo-admin-2-3-0%E6%B1%89%E5%8C%96%E4%B8%8E%E4%BC%98%E5%8C%96/","content":"参考hexo-admin汉化补丁\n与原版的区别\n进行了汉化\n让图片管理更方便，每篇文章都有对应的图片文件夹。\n添加了自动保存和部署的功能\n\n问题\n过于频繁的自动提交，每次键入停顿时间超过一秒，就会自动上传罪最新的文本，并自动更新静态文件；文本过大时，这会影响到使用，也会加重服务器的负担。\n\n","categories":["Hexo"]},{"title":"hexo-admin后台更新静态文件","url":"/2021/03/07/hexo-admin%E5%90%8E%E5%8F%B0%E6%9B%B4%E6%96%B0%E9%9D%99%E6%80%81%E6%96%87%E4%BB%B6/","content":"建立.sh文件因为我服务器为linux，所以这里就以linux下作为演示\n# 1.你的博客根目录下，新建一个存放shell脚本的目录$ mkdir ./script$ vim ./script/hexo-g.sh# 2.按 i 进入编辑# 输入 #!/bin/bash &lt;-表示执行下面命令的程序hexo clean &amp;&amp; hexo g# 3.ESC退出编辑模式，输入 :wq 保存退出# 输出文件内容$ cat ./script/hexo-g.sh#!/bin/bashhexo clean &amp;&amp; hexo g# 4.给文件执行权限$ chmod +x ./script/hexo-g.sh\n\n在_config.yml添加执行command$ vim _config.yml# 输入以下内容 admin:   username: xxxxx   password_hash: XXXXXXXX   secret: XXXXXX   deployCommand: &#x27;./script/hexo-g.sh&#x27;\n\n使用写完博客，点击即可\n来自anlondon博客\n因为我不需要推送到git,所以没配置git和hexo d，如有需要可以自行配置\n可能的错误页面报错：\n来自anlondon博客\n命令行报错：\nres Error: spawn ./script/hexo-g.sh EACCE    at Process.ChildProcess._handle.onexit (internal/child_process.js:269:19)    at onErrorNT (internal/child_process.js:465:16)    at processTicksAndRejections (internal/process/task_queues.js:80:21) &#123;  errno: -13,  code: &#x27;EACCES&#x27;,  syscall: &#x27;spawn ./script/hexo-g.sh&#x27;,  path: &#x27;./script/hexo-g.sh&#x27;,  spawnargs: [ &#x27;&#x27; ]&#125; &#123; stdout: &#x27;&#x27;, stderr: &#x27;&#x27; &#125;\n\n原因：是因为我linux没有安装expect，而spawn是expect的功能之一，yum install expect即可解决\n更多hexo-admin的问答见hexo-admin 开发者问答\n","categories":["Hexo"]},{"title":"hexo 给文章中英文添加空格","url":"/2021/03/07/hexo-%E7%BB%99%E6%96%87%E7%AB%A0%E4%B8%AD%E8%8B%B1%E6%96%87%E6%B7%BB%E5%8A%A0%E7%A9%BA%E6%A0%BC/","content":"来源: 振伟普拉斯 | Hexo 给文章中英文添加空格 \n\n在使用Hexo写文章时，由于写的大都是些技术类的文章，中英文字符经常交错在一起，对于强迫症的我来说看起来着实不舒服了。\n好在 GitHub 上什么大神都有，还真有人开发了给中英文添加空格的工具：https://github.com/vinta/pangu.js\n\n   　　為什麼你們就是不能加個空格呢？   　　如果你跟我一樣，每次看到網頁上的中文字和英文、數字、符號擠在一塊，就會坐立難安，忍不住想在它們之間加個空格。這個外掛（支援 Chrome 和 Firefox）正是你在網路世界走跳所需要的東西，它會自動替你在網頁中所有的中文字和半形的英文、數字、符號之間插入空白。\n   　　漢學家稱這個空白字元為「盤古之白」，因為它劈開了全形字和半形字之間的混沌。另有研究顯示，打字的時候不喜歡在中文和英文之間加空格的人，感情路都走得很辛苦，有七成的比例會在 34 歲的時候跟自己不愛的人結婚，而其餘三成的人最後只能把遺產留給自己的貓。畢竟愛情跟書寫都需要適時地留白。\n\n在 Hexo 中使用也很简单，npm 安装一下就可以了：npm install hexo-pangu-spacing --save\n然后重新 hexo g 看修改后的效果。\n20191201，纠正上面这个插件有些问题，在代码中也会加入空格，代码中应该是不需要的。\n又找到另一个插件，试了下没问题：https://github.com/hexojs/hexo-filter-auto-spacing\n其他问题(anlondon)\nhexo-pangu-spacing会导致 **加粗** 失效\nhexo-filter-auto-spacing会导致脚注插件不能正常运行\n\n相关文章\n\nHexo NexT 主题添加自定义字体（基于 7.1.0 版本）\nHexo 使用 hexo-neat 插件压缩页面资源\nHexo NexT 主题集成 utterance 评论系统\nHexo Next 主题自定义样式\n\n","categories":["Hexo"]},{"title":"windows2008 R2忘记密码","url":"/2021/03/19/indows2008-R2%E5%BF%98%E8%AE%B0%E5%AF%86%E7%A0%81/","content":"问题服务器：Windows2008 R2远程时一直提示密码错误，于是手动修改远程密码\n解决阿里等第三方虚拟主机\n登录云服务器管理控制台。\n单击左侧导航栏中的实例，在实例列表找到您需要远程登录的目标实例，单击远程连接，在弹出的页面中选择发送远程命令（云助手）的方式。 \n输入重置密码命令，然后单击执行按钮 net user administrator 123456@p 上述命令为重置adminitrator用户密码为123456@p\n之后即可使用重置的账号和密码进行远程连接\n\n本地\nwin+X唤出命令行窗口\nnet user administrator 123456@p 重置密码\n\n\n参考资料：\n\n阿里解答|重置Windows服务器的远程连接密码\n百度经验|Server2008R2系统忘记密码时进行密码重置\n\n"},{"title":"javascript中var,let,const的区别用法","url":"/2021/04/05/javascript%E4%B8%ADvar-let-const%E7%9A%84%E5%8C%BA%E5%88%AB%E7%94%A8%E6%B3%95/","content":"来源：javascript中var,let,const的区别用法 - 简书\n\nvarvar相比let就是管的比较宽，他的值可以被内部修改。\n\nfunction tests()&#123;    var n &#x3D; 1;    if (true) &#123;        var n &#x3D; 2;    &#125;    console.log(n); &#x2F;&#x2F;值被函数内部修改，输出2&#125;tests();if(1)&#123;    var a &#x3D; 100;&#125;console.log( a );&#x2F;&#x2F;输出100,因为var没有块级作用域，这里a会成为全局变量\n\n\nletlet是es6中新增定义,带有块级作用域，只会在所定义块生效。\n\nfunction test()&#123;    let n &#x3D; 1;    if (true) &#123;        let n &#x3D; 2;    &#125;    console.log(n); &#x2F;&#x2F;值不会被修改，输出1&#125;test();if(1)&#123;    let b &#x3D; 100;&#125;console.log( b );&#x2F;&#x2F;错误 ReferenceError: b is not defined&#x2F;&#x2F;因为let的块级作用域，所以b变量只存在与if内部\n\n\nconstconst用来定义常量(可以是字符串，数组，函数，对象等)，并且初始值不可为空，但他并不是不可更改的。举个栗子：\nconst c;&#x2F;&#x2F;会产生报错.const d &#x3D; 1;&#x2F;&#x2F;正确const arr &#x3D; [1, 2];arr.push(1);&#x2F;&#x2F;正确 [1, 2, 1]arr[0] &#x3D; 3;&#x2F;&#x2F;正确 [3, 2, 1]arr &#x3D; [];&#x2F;&#x2F;错误TypeError: invalid assignment to const &#96;arr&#39;\n可见，如果有需要，可以改变const里所存储的值，但它的指向空间是无法操作的。\n\n有趣的面试例子面试的时候很经常遇到一个例子：\nfor (var i &#x3D; 0; i &lt; 5; i++) &#123;    setTimeout(function() &#123;        console.log(i);    &#125;, 1000);&#125;&#x2F;&#x2F;这个例子执行完输出什么结果？&#x2F;&#x2F;答案是 5,5,5,5,5&#x2F;&#x2F;如果想要输出0,1,2,3,4改怎么实现？&#x2F;&#x2F;其中一种方案就是把var换成let就可以了。let的块级作用域在这里就体现出来了。for (let i &#x3D; 0; i &lt; 5; i++) &#123;    setTimeout(function() &#123;        console.log(i);    &#125;, 1000);&#125;\n\n","categories":["npm"]},{"title":"md引用base64图片","url":"/2021/03/07/md%E5%BC%95%E7%94%A8base64%E5%9B%BE%E7%89%87/","content":"markdown 引用base64图片使用\n声明[image_name]:data:image/png;base64,..\n调用![图片描述][image_name]\n注意：图片越大，base64代码越多，加载也就会越久前端规范中，一般在2k及以下的图片才能使用 Base64\n\n\n\n图片转 Base64 的网站站长工具\n注意！hexo-admin 测试 Base64 时，会出现加载很慢的情况，是因为 hexo-admin 会一次加载全部的文章数据，而过多的 Base64 会导致数据包过大影响页面加载速度。\n","categories":["MarkDown"]},{"title":"mysqldump ERROR 1064 (42000): You have an error in your SQL syntax","url":"/2021/03/07/mysqldump-ERROR-1064-42000-You-have-an-error-in-your-SQL-syntax/","content":"\n来源mysqldump备份数据库提示ERROR 1064 (42000): You have an error in your SQL syntax作者：sunsineq\n\nERROR 1064 (42000): You have an error in your SQL syntax; check the manual thatcorresponds to your MySQL server version for the right syntax to use near &#x27;mysql -v&#x27; at line 1\n在dos下备份数据库的时候提示上面的错误信息\n通过查资料知道，不需要登录mysql,只需要在命令行下切换到mysql\\bin目录，使用备份命令mysqldump即可\nd:\\phpStudy\\MySQL\\bin&gt;mysqldump -uroot -proot testphp &gt;d:\\testphp.sql   d:\\phpStudy\\MySQL\\bin&gt;\n\n【anlondon:】还有一种情况是，备份时用的powershell，还原时用的cmd,也会出现这种情况情况，原因好像是因为两者的输出编码不同导致的，这时统一命令行软件即可\n","categories":["MySql"]},{"title":"mysqldump备份数据库 Couldn't execute 'SHOW VARIABLES LIKE 'gtid\\_mode''","url":"/2021/03/07/mysqldump%E5%A4%87%E4%BB%BD%E6%95%B0%E6%8D%AE%E5%BA%93-Couldn-t-execute-SHOW-VARIABLES-LIKE-gtid-mode/","content":"错误mysqldump: Couldn’t execute ‘SHOW VARIABLES LIKE ‘gtid_mode’’: Table ‘performance_schema.session_variables’ doesn’t exist (1146)\n原因这是mysql升级的结果；因为我本地切换过MySQL版本而导致的错误\n解决\nwin#更新$ mysql_upgrade -u root -p --force#需要停止进程$ net stop mysql#再次开启$ net start mysql\nlinux$ mysql_upgrade -u root -p --force$ systemctl restart mysqld\n\n\n相关资料：\n\nmysqldump备份数据库出现（Couldn’t execute ‘SHOW VARIABLES LIKE ‘gtid_mode’’）错误解决办法\nmysqldump: Couldn’t execute ‘SHOW VARIABLES LIKE ‘gtid_mode’’: Table ‘performance_schema.session_v\n\n","categories":["MySql"]},{"title":"mysql出现“Incorrect key file for table”解决办法","url":"/2021/08/10/mysql%E5%87%BA%E7%8E%B0%E2%80%9CIncorrect-key-file-for-table%E2%80%9D%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/","content":"出现问题\nSQLSTATE[HY000]: General error: 126 Incorrect key file for table ‘.\\voice\\admin_user.MYI’; try to repair it\n\n引擎是：MyISAM数据库：mysql5.7.26\n运行下面的命令修复即可 repair table tables_name;\n  mysql&gt; repair table admin_user;+-------------------------------+--------+----------+----------+| Table                         | Op     | Msg_type | Msg_text |+-------------------------------+--------+----------+----------+| .admin_user             | repair | status   | OK       |+-------------------------------+--------+----------+----------+1 row in set (0.02 sec)\n\n\n参考资料：\n\nmysql出现“Incorrect key file for table”解决办法\n\n","categories":["MySql"],"tags":["MySql"]},{"title":"nginx多版本PHP配置","url":"/2021/03/07/nginx%E5%A4%9A%E7%89%88%E6%9C%ACPHP%E9%85%8D%E7%BD%AE/","content":"参考NGINX配置手册 Nginx中文文档|虚拟主机\n有讲解到 UNIX Domain Socket 和 tcp 的区别nginx: fastcgi_pass的配置\n视频讲解：【体验课】NGINX快速学习指南\nnginx多版本PHP配置一位客户服务器配置为\n\nCentOS7\nPHP 7.4\nmysql 5.7\nNGINX 1.15.11\n\n但是因为项目只能使用PHP5.x，因此需要修改相应的服务器配置\n安装 nginxnginx 官网\n\n安装依赖包:# yum -y install pcre pcre-devel openssl openssl-devel gcc gcc-c++ autoconf automake zlib-devel libxml2 libxml2-dev libxslt-devel gd-devel perl-devel perl-ExtUtils-Embed GeoIP GeoIP-devel GeoIP-data make  GeoIP-devel GeoIP-update\n\n下载nginx1.15\n$ cd /usr/local/src/$ curl -o nginx-1.15.1.tar.gz http://nginx.org/download/nginx-1.15.1.tar.gz\n创建用户和组\n# groupadd nginx# useradd nginx -g nginx -s /sbin/nologin -M\n解压,配置,编译,安装官网对参数的说明Building nginx from Sources\n$ tar -zxvf nginx-1.15.1.tar.gz$ cd nginx-1.15.1#测试一下$ ./configure#如果没报错则开始设置#设置$ ./configure --prefix=/usr/local/nginx --user=nginx --conf-path=/usr/local/nginx/nginx.conf --pid-path=/usr/local/nginx/nginx.pid --error-log-path=/usr/local/nginx/logs/error.log --http-log-path=/usr/local/nginx/logs/access.log --group=nginx --with-http_ssl_module --with-http_realip_module --with-http_geoip_module --with-http_stub_status_module --with-http_sub_module --with-stream --with-stream=dynamic #编译安装$ make &amp;&amp; make install\n\n\n安装出现的一些错误以及解决办法\n\nLinux Nginx安装以及可能出现错误\nError: xz compression not available的解决办法\n如果不指定 nginx.pid 路径，则运行时可能报错\n\n\n./nginx 启动，重启 nginx 时遇到错误会直接停止 nginx,并删除pid文件，此时解决报错，并启动 nginx 即可。\n解决Nginx: error open() ＂/usr/local/Nginx/logs/Nginx.pid” failed（2:No such file or directory）\n\n\n\n添加为系统服务，新建一个服务$ vim /usr/lib/systemd/system/nginx.service\n\n复制下面的内容，路径改为自己设置的路径\n[Unit]Description=nginxAfter=network.target[Service]Type=forkingPIDFile=/usr/local/nginx/logs/nginx.pidExecStartPre=/usr/local/nginx/sbin/nginx -t -q -g &#x27;daemon on; master_process on;&#x27;ExecStart=/usr/local/nginx/sbin/nginx -g &#x27;daemon on; master_process on;&#x27;ExecReload=/usr/local/nginx/sbin/nginx -g &#x27;daemon on; master_process on;&#x27; -s reloadExecStop=-/sbin/start-stop-daemon --quiet --stop --retry QUIT/5 --pidfile /usr/local/nginx/logs/nginx.pidTimeoutStopSec=5KillMode=mixed[Install]WantedBy=multi-user.target\n\n#设置nginx.service文件的权限$ chmod 664 /usr/lib/systemd/system/nginx.service#验证服务$ curl -I 127.0.0.1:80\n\n\nnginx命令行参数：#nginx 原生参数\t-V    查看编译参数。\t-h    查看帮助。\t-g    设置全局配置指令。\t-s    发送信号              信号:\t\t   stop   快速关闭\t\t   quit   正常关闭，等待工作进程完成当前请求后停止nginx进程\t\t   reload 重新加载配置文件\t\t   reopen 重新打开日志文件.#使用 ./nginx -s stop/quit/reload/reopen#系统服务指令$ systemctl status nginx.service$ systemctl start nginx.service$ systemctl restart nginx.service$ systemctl stop nginx.service#开启服务启动时执行$ systemctl enable nginx.service\n\n配置 nginx 虚拟机使用指定版本PHP# vim /usr/local/nginx/nginx.conf\nserver&#123;\tlisten 80;    server_name localhost;    root /usr/local/nginx/html/guoxinan/;    location / &#123;\t\tindex index.php index.html;        autoindex off;    &#125;    \tlocation ~ \\.php$ &#123;    \t#监听指定php版本的 cgi 端口\t\tfastcgi_pass 127.0.0.1：9074;        fastcgi_param SCRIPT FILENAME $document_root$fastcgi_script_name;        include fastcgi_params;\t&#125;&#125;\n\n在 http&#123;&#125; 中，一个 server&#123;&#125; 表示一个虚拟机，而虚拟机使用 指定版本 PHP 也只需要设置\nlocation ~ \\.php$ &#123;   \t#监听指定php版本的 cgi 端口\tfastcgi_pass 127.0.0.1：9074;       fastcgi_param SCRIPT FILENAME $document_root$fastcgi_script_name;       include fastcgi_params;&#125;\n\n伪静态nginx常用伪静态设置Nginx针对URL或目录访问控制总结\nnginx多版本PHP配置\n引用项目根目录下的 nginx.htaccess 文件include /xx/WWW/xxx/nginx.htaccess;\n伪静态规则允许某些目录下的文件访问\nif ($request_filename !~* /(index\\.php|htsysadmin|HTSYSADMIN|Bak2010|robots\\.txt|favicon\\.ico|sitemap\\.xml|sitemap\\.html|skin|upload)) &#123;      rewrite ^/(.*)$ /index.php/$1 last;&#125;\n\n-e filename 如果 filename存在，则为真-d filename 如果 filename为目录，则为真 -f filename 如果 filename为常规文件，则为真-L filename 如果 filename为符号链接，则为真-r filename 如果 filename可读，则为真 -w filename 如果 filename可写，则为真 -x filename 如果 filename可执行，则为真-s filename 如果文件长度不为0，则为真-h filename 如果文件是软链接，则为\n\n\n相关资料:\n\nnginx1.15安装(一)\nnginx1.15安装和配置\nError: xz compression not available的解决办法\nRHEL/CentOS 7中Nginx的systemd service\n【部署问题】解决Nginx: [error] open() ＂/usr/local/Nginx/logs/Nginx.pid” failed（2:No such file or directory）\n解决NGINX PHP “No input file specified”\n$request_filename + nginx内置变量\n\n","categories":["Nginx"]},{"title":"node版本导致的错误","url":"/2021/03/07/node%E7%89%88%E6%9C%AC%E5%AF%BC%E8%87%B4%E7%9A%84%E9%94%99%E8%AF%AF/","content":"错误cant not found moudle mybolgPath/...\n说是找不到模块...，这个有点奇怪的报错，让我觉得莫名其妙，于是在网上各种搜索\n原因看到有大佬说如果文件配置和模块都没问题，但提示找不到模块，多半是node版本不适合当前项目导致的\n想了想，我最近在鼓捣自己的博客时，改动最多的就是配置文件，模块什么的就没动过，最大的改动就是为了测试一个功能安装了最新版的node。\n解决最开始我用的是node v11.14.0,之后更新到了 v14.15.0想要快捷简单的管理node版本，可以使用n一个node的版本控制插件\n安装nnpm install -g n\n查看node版本node -v14.15.0\n下载11.14.0n v11.14.0[1]\n完成后查看node版本node -v11.14.0\n之后再次运行博客，就没出现找不到模块的错误了，解决。\n1.可能会提示PATH=$PATH之类的错误，是因为系统还在使用之前版本的node,运行一下PATH=$PATH即可 ↩","categories":["node"]},{"title":"npm 打包项目","url":"/2021/04/05/npm-%E6%89%93%E5%8C%85%E9%A1%B9%E7%9B%AE/","content":"\n来源: vue使用npm run build命令打包 - 西瓜君~ - 博客园\n\n当我们使用vue-cli脚手架完成一个项目的时候，下一步肯定会想要怎么把这个项目放到互联网上或者本地直接打开呢，我们在本地调试的时候只要命令行执行npm run dev就可以把这个项目跑起来，但是现在我们要把他放到服务器上的话用npm run build命令就可以啦。\n首先\n命令行执行npm run build命令，命令需要在项目目录下执行\nC:\\Users\\John\\Desktop\\demo&gt;npm run build   我的是一个在桌面叫demo的项目\n出现以下提示表示打包完成：\n\nvue使用npm run build命令打包项目然后\n我们就可以像打开静态网页一样打开我们完成的项目。\n下图为打包生成的dist文件夹，其中index.html为入口文件：\nvue使用npm run build命令打包项目\n没错，这时你打开了index.html文件，发现网页一片空白，打开F12发现console报了几个错误，状态码为404：\nvue使用npm run build命令打包项目\n这是因为引用资源的路径问题，我们只要在下图的地方修改一下再打包就可以了。\n需要修改的文件在项目目录下的config文件夹里的index.js文件中\nvue使用npm run build命令打包项目\n改完，再次执行npm run build，然后打开index.html发现sucess\ndemo\n完。\n","categories":["npm"]},{"title":"o盘隐藏文件","url":"/2021/03/07/o%E7%9B%98%E9%9A%90%E8%97%8F%E6%96%87%E4%BB%B6/","content":"\n新建文本，输入以下内容，并修改文件后缀为cmd@ECHO OFFMD E:\\RECYCLED\\UDrives.&#123;25336920-03F9-11CF-8FD0-00AA00686F13&#125;&gt;NULIF EXIST O:\\NUL GOTO DELETESUBST O: E:\\RECYCLED\\UDrives.&#123;25336920-03F9-11CF-8FD0-00AA00686F13&#125;STARTO:\\GOTO END:deleteSUBST /D O::END\n双击cmd运行，会自动在 E盘 新建一个 RECYCLED 文件夹。而系统会生成一个o盘，存放完东西后，再次双击，该盘就会消失。\n\n\n在xp下，该文件夹会自动变成回收站，但是win10不会，如果是win10，想要生效则要设置 desktop.ini。\n\n右键 RECYCLED 文件夹-&gt;属性-&gt;高级，取消勾选[除了 文件属性外，还允许索弓此文件夹中文件的内容]\n使用win自带的搜索工具就不能查找到该文件夹内的文件，确认之后，勾选属性中的只读与隐藏。\n\n但是其他更强大的搜索软件能搜索到，毕竟该方法只是隐藏，没有加密\n\n\nRECYCLED 属性设置\n\n win10中，文件夹名并不会影响到文件夹属性，所以需要手动设置文件夹属性\n 在 RECYCLED 文件夹里新建desktop.ini，写入 [.ShellClassInfo]CLSID=&#123;645FF040-5081-101B-9F08-00AA002F954E&#125;\n &#123;645FF040-5081-101B-9F08-00AA002F954E&#125;为回收站保存后，重开文件夹就成了回收站。无法打开,但是右键属性并且因为属于系统性文件夹,只开启 文件夹选项中的 [显示隐藏文件] 也不能查看\n\n不过可以通过cmd/rar查看cmd：#进入该文件夹$ cd RECYCLED#查看文件$ dir#只显示隐藏文件$ dir /a:h\t#使用记事本 编辑desktop.ini\t$ notepad desktop.ini\n\n","categories":["杂谈"]},{"title":"php-xdebug配置","url":"/2021/04/05/php-xdebug%E9%85%8D%E7%BD%AE/","content":"来源：PhpStorm配置Xdebug调试_司马彰的学习专栏 - SegmentFault 思否\n安装xdebug去官网下载对应版本的xdebug扩展Xdebug: Downloads\n\n历史版本见Github：xdebug.org/html/files at master · derickr/xdebug.org · GitHub\n\n如何选择正确版本1.官网下载\n输出phpinfo()函数的内容\n\n![一座浮岛](/2021/04/05/php-xdebug配/pasted-0.png)\n\n查看输出页面的网页源码\n\n!\n\n全选复制\n\n\n\n到这个页面 Xdebug: Support — Tailored Installation Instructions ,将刚才复制的内容拷贝进去,并分析\n\n\n\n可以得到自己当前版本的php对应哪一个xdebug文件\n\n\n2.GitHub下载历史版本当官网没有时，我们可以去GitHub找它的历史版本xdebug.org/html/files at master · derickr/xdebug.org · GitHub\n\n输出phpinfo()函数的内容根据图中信息，php版本为5.3.29-nts-v9-x86\nphp版本对应的xdebug说明：这是一个xdebug文件php_xdebug-2.1.2-5.3-vc9-nts-x86_64.dll\n\nphp_xdebug-2.1.2表示是2.1.2版本的xdebug\n5.3-vc9表示php是5.3.*版本，并且Compiler 是    MSVC9 (Visual C++ 2008)\nnts则是None-Thread Safe非线程安全，Thread Safe=disabled 则是表示nts\nx86_64则是Architecture=x86!!不一定非要32位的，可以先试64位的!! \n\n\n\n进入页面后按CTRL+f进行搜索\n\n\n下载好的dll配置好后如果phpinfo中没有打印xdebug这一栏，则说明该版本不适合，需要更换版本。不然调试时就会报找不到idekey的提示！(waiting for incoming connection with ide kay’xxx’)吐槽下：如果没有耐心去试，直接搜索支持php5.3-vc9-nts-x86 的xdebug 说不定有惊喜\n\n安装扩展这个windows系统和Linux系统是不一样的(网上很多,不细说)\nwindows放到php ext的目录下配置php.ini\n[XDebug] zend_extension &#x3D; &quot;D:\\你php的ext目录位置\\php\\ext\\php_xdebug.dll&quot;xdebug.remote_autostart&#x3D;1 xdebug.remote_enable &#x3D; Onxdebug.remote_handler &#x3D; &quot;dbgp&quot;xdebug.remote_host &#x3D; &quot;localhost&quot; #本地服务器xdebug.remote_port &#x3D; 9010        #默认为9000，防止与php-fpm冲突，改为9010xdebug.idekey&#x3D;&quot;PHPSTORM&quot;    #会话需要的key\n\nLinux这个很多种情况,一般就apt和yum,如果手动编译就需要.so扩展放到正确位置(phpize使用)配置phpStorm先查看xdebug是否安装成功\n配置phpstorm我是基于这个版本的\n打开phpstorm配置文件\n设置本地的php解释器php解释器,就是php的二进制文件，windows下的php安装路径下的php.exe，类unix系统就是bin/php文件\n如果没有上述选项\n填写服务器端的相关信息\nHost指的是服务器对应的项目的访问域名\n本地nginx我用127.0.0.1\n用默认的80端口\n\n\n\n\n配置xdebug选项\n配置DBGp ProxyDBGp Proxy：多人远程调试\n添加一个调试配置\n\n我们这里使用的是PHP Web Page,是需要依赖浏览器,额外的说明我写在本文的后记了,不是现在需要关注的重点\n\n\n配置chrome安装浏览器插件我这里使用的是chrome浏览器,安装的是xdebug helper插件,无法使用应用商店的可以到国内镜像网站去下\n配置插件\n开始调试\n\n后记本文中,我们PhpStorm使用的是PHP Web Page,这是需要依赖浏览器,且浏览器是必须安装插件另一种情况,如果我们使用PHP Remote Debug,就只需要在网址后面加上?XDEBUG_SESSION_START=PHPSTORM,这样可以调试了,和浏览器无关两者各有优劣，使用Remote Debug的坏处在于需要加上参数,但却不依赖浏览器,有利于手机App,微信的调试\n\n配置总结：\n1、不要依靠wamp上php版本对应的xdebug版本，要按照上面描述的方法进行检测，下载匹配的xdebug版本。\n2、这个调试是要在浏览器里安装插件才能进行调试，并且要手动输入调试地址，直接点击下图所示调试图标无效，暂时没弄明白。\n3、google插件下载地址：[http://chromecj.com/web-development/2018-04/980/download.html]\n","categories":["PHP"]},{"title":"php yield理解","url":"/2021/06/20/php-yield%E7%90%86%E8%A7%A3/","content":"\n转载自：PHP中被忽略的性能优化利器：生成器|segmentfault作者：星空幻颖\n \n\n如果是做Python或者其他语言的小伙伴，对于生成器应该不陌生。但很多PHP开发者或许都不知道生成器这个功能，可能是因为生成器是PHP 5.5.0才引入的功能，也可以是生成器作用不是很明显。但是，生成器功能的确非常有用。\n优点\n直接讲概念估计你听完还是一头雾水，所以我们先来说说优点，也许能勾起你的兴趣。那么生成器有哪些优点，如下：\n\n生成器会对PHP应用的性能有非常大的影响\nPHP代码运行时节省大量的内存\n比较适合计算大量的数据\n\n那么，这些神奇的功能究竟是如何做到的？我们先来举个例子。\n概念引入\n首先，放下生成器概念的包袱，来看一个简单的PHP函数：\nfunction createRange($number)&#123;    $data = [];    for($i=0;$i&lt;$number;$i++)&#123;        $data[] = time();    &#125;    return $data;&#125;\n\n这是一个非常常见的PHP函数，我们在处理一些数组的时候经常会使用。这里的代码也非常简单：\n\n我们创建一个函数。\n函数内包含一个for 循环，我们循环的把当前时间放到$data里面\nfor循环执行完毕，把 $data 返回出去。\n\n下面没完，我们继续。我们再写一个函数，把这个函数的返回值循环打印出来：\n$result = createRange(10); // 这里调用上面我们创建的函数foreach($result as $value)&#123;    sleep(1);//这里停顿1秒，我们后续有用    echo $value.&#x27;&lt;br /&gt;&#x27;;&#125;\n\n这里非常完美，没有任何问题。（当然 sleep(1) 效果你们看不出来）\n思考一个问题\n我们注意到，在调用函数 createRange 的时候给 $number 的传值是10，一个很小的数字。假设，现在传递一个值10000000（1000万）。\n那么，在函数 createRange 里面，for循环就需要执行1000万次。且有1000万个值被放到 $data 里面，而$data数组在是被放在内存内。所以，在调用函数时候会占用大量内存。\n这里，生成器就可以大显身手了。\n创建生成器\n我们直接修改代码，你们注意观察：\nfunction createRange($number)&#123;    for($i=0;$i&lt;$number;$i++)&#123;        yield time();    &#125;&#125;\n看下这段和刚刚很像的代码，我们删除了数组 $data ，而且也没有返回任何内容，而是在 time() 之前使用了一个关键字yield。\n使用生成器\n我们再运行一下第二段代码：\n$result = createRange(10); // 这里调用上面我们创建的函数foreach($result as $value)&#123;    sleep(1);    echo $value.&#x27;&lt;br /&gt;&#x27;;&#125;\n\n我们奇迹般的发现了，输出的值和第一次没有使用生成器的不一样。这里的值（时间戳）中间间隔了1秒。\n这里的间隔一秒其实就是 sleep(1) 造成的后果。但是为什么第一次没有间隔？那是因为：\n\n未使用生成器时： createRange 函数内的 for 循环结果被很快放到 $data 中，并且立即返回。所以， foreach 循环的是一个固定的数组。\n使用生成器时： createRange 的值不是一次性快速生成，而是依赖于 foreach 循环。 foreach 循环一次， for 执行一次。\n\n到这里，你应该对生成器有点儿头绪。\n深入理解生成器\n代码剖析function createRange($number)&#123;    for($i=0;$i&lt;$number;$i++)&#123;        yield time();    &#125;&#125;$result = createRange(10); // 这里调用上面我们创建的函数foreach($result as $value)&#123;    sleep(1);    echo $value.&#x27;&lt;br /&gt;&#x27;;&#125;\n我们来还原一下代码执行过程。\n\n首先调用 createRange 函数，传入参数10，但是 for 值执行了一次然后停止了，并且告诉 foreach 第一次循环可以用的值。\nforeach 开始对 $result 循环，进来首先 sleep(1) ，然后开始使用 for给的一个值执行输出。\nforeach 准备第二次循环，开始第二次循环之前，它向 for 循环又请求了一次。\nfor 循环于是又执行了一次，将生成的时间戳告诉 foreach.\nforeach 拿到第二个值，并且输出。由于 foreach 中 sleep(1) ，所以， for 循环延迟了1秒生成当前时间\n\n所以，整个代码执行中，始终只有一个记录值参与循环，内存中也只有一条信息。\n无论开始传入的 $number 有多大，由于并不会立即生成所有结果集，所以内存始终是一条循环的值。\n概念理解到这里，你应该已经大概理解什么是生成器了。下面我们来说下生成器原理。\n首先明确一个概念：生成器yield关键字不是返回值，他的专业术语叫产出值，只是生成一个值\n那么代码中 foreach 循环的是什么？其实是PHP在使用生成器的时候，会返回一个 Generator 类的对象。 foreach 可以对该对象进行迭代，每一次迭代，PHP会通过 Generator 实例计算出下一次需要迭代的值。这样 foreach 就知道下一次需要迭代的值了。\n而且，在运行中 for 循环执行后，会立即停止。等待 foreach 下次循环时候再次和  for  索要下次的值的时候，循环才会再执行一次，然后立即再次停止。直到不满足条件不执行结束。\n实际开发应用很多PHP开发者不了解生成器，其实主要是不了解应用领域。那么，生成器在实际开发中有哪些应用？\n读取超大文件PHP开发很多时候都要读取大文件，比如csv文件、text文件，或者一些日志文件。这些文件如果很大，比如5个G。这时，直接一次性把所有的内容读取到内存中计算不太现实。\n这里生成器就可以派上用场啦。简单看个例子：读取text文件\n\n我们创建一个text文本文档，并在其中输入几行文字，示范读取。\n&lt;?phpheader(&quot;content-type:text/html;charset=utf-8&quot;);function readTxt()&#123;    # code...    $handle = fopen(&quot;./test.txt&quot;, &#x27;rb&#x27;);    while (feof($handle)===false) &#123;        # code...        yield fgets($handle);    &#125;    fclose($handle);&#125;foreach (readTxt() as $key =&gt; $value) &#123;    # code...    echo $value.&#x27;&lt;br /&gt;&#x27;;&#125;\n\n\n通过上图的输出结果我们可以看出代码完全正常。\n但是，背后的代码执行规则却一点儿也不一样。使用生成器读取文件，第一次读取了第一行，第二次读取了第二行，以此类推，每次被加载到内存中的文字只有一行，大大的减小了内存的使用。\n这样，即使读取上G的文本也不用担心，完全可以像读取很小文件一样编写代码。\n完\n补充\n百万级别的访问量\nyield生成器是php5.5之后出现的，yield提供了一种更容易的方法来实现简单的迭代对象，相比较定义类实现 Iterator 接口的方式，性能开销和复杂性大大降低。\nyield生成器允许你 在 foreach 代码块中写代码来迭代一组数据而不需要在内存中创建一个数组。\n使用示例：\n/**  * 计算平方数列  * @param $start  * @param $stop  * @return Generator  */  function squares($start, $stop) &#123;      if ($start &lt; $stop) &#123;          for ($i = $start; $i &lt;= $stop; $i++) &#123;              yield $i =&gt; $i * $i;          &#125;      &#125;      else &#123;          for ($i = $start; $i &gt;= $stop; $i--) &#123;              yield $i =&gt; $i * $i; //迭代生成数组： 键=》值          &#125;      &#125;  &#125;  foreach (squares(3, 15) as $n =&gt; $square) &#123;      echo $n . ‘squared is‘ . $square . ‘&lt;br&gt;‘;  &#125;  输出：      3 squared is 9      4 squared is 16      5 squared is 25      ...  \n示例2：\n/对某一数组进行加权处理  $numbers = array(‘nike‘ =&gt; 200, ‘jordan‘ =&gt; 500, ‘adiads‘ =&gt; 800);    //通常方法，如果是百万级别的访问量，这种方法会占用极大内存  function rand_weight($numbers)  &#123;      $total = 0;      foreach ($numbers as $number =&gt; $weight) &#123;          $total += $weight;          $distribution[$number] = $total;      &#125;      $rand = mt_rand(0, $total-1);        foreach ($distribution as $num =&gt; $weight) &#123;          if ($rand &lt; $weight) return $num;      &#125;  &#125;    //改用yield生成器  function mt_rand_weight($numbers) &#123;      $total = 0;      foreach ($numbers as $number =&gt; $weight) &#123;          $total += $weight;          yield $number =&gt; $total;      &#125;  &#125;    function mt_rand_generator($numbers)  &#123;      $total = array_sum($numbers);      $rand = mt_rand(0, $total -1);      foreach (mt_rand_weight($numbers) as $num =&gt; $weight) &#123;          if ($rand &lt; $weight) return $num;      &#125;  &#125;  "},{"title":"php 数组使用unset 以后数组变对象","url":"/2021/05/13/php-%E6%95%B0%E7%BB%84%E4%BD%BF%E7%94%A8unset-%E4%BB%A5%E5%90%8E%E6%95%B0%E7%BB%84%E5%8F%98%E5%AF%B9%E8%B1%A1/","content":"&#x2F;* 隐藏系统奖品优惠券,并重构数据 *&#x2F;foreach ($detail[&#39;coupons&#39;] as $k&#x3D;&gt;$v)&#123;    if($v[&#39;type&#39;] &#x3D;&#x3D; &#39;sys&#39;)&#123;         unset($detail[&#39;coupons&#39;][$k]);    &#125;&#125;\n\nunset后，发现数组变为对象，导致前端数据读取不到\n\n使用 array_value（）即可\n&#x2F;&#x2F;unset()会将数组变为对象，因此需要重构数组$detail[&#39;coupons&#39;] &#x3D; array_values($detail[&#39;coupons&#39;]);&#x2F;*输出的数据coupons:[ \t0：&#123; id: 9, name: &quot;其他优惠券&quot;, type: &quot;cash&quot;, … &#125;    ]*&#x2F;\n\n参考资料:\n\nphp 数组使用unset 以后数组变对象\n\n"},{"title":"php 生成二维码","url":"/2021/07/30/php-%E7%94%9F%E6%88%90%E4%BA%8C%E7%BB%B4%E7%A0%81/","content":"前言\nphp 7.14\n需开启GD2库\n\n\nphpQRCode 1.1.4\n下载 PHP QR Code\n\n\n\n说明文件里只需要phpqrcode.php文件。它是一个多个类的集合文件，我们需要用到里边的QRcode类（第2963行）的png()方法（第3090行）：\npublic static function png($text, $outfile = false, $level = QR_ECLEVEL_L, $size = 3, $margin = 4, $saveandprint=false) &#123;\t$enc = QRencode::factory($level, $size, $margin);\treturn $enc-&gt;encodePNG($text, $outfile, $saveandprint=false);&#125;\n** 参数说明 **\n\n$text：二维码包含的内容，可以是链接、文字、json字符串等等；\n$outfile：默认为false，不生成文件，只返回图片二进制字符串；否则填路径及文件名用以存放图片；\n$level：默认为L，这个参数可传递的值分别是L:(QR_ECLEVEL_L，7%)、M:(QR_ECLEVEL_M，15%)、Q:(QR_ECLEVEL_Q，25%)、H:(QR_ECLEVEL_H，30%)，这个参数控制二维码容错率，不同的参数表示二维码可被覆盖的区域百分比，也就是被覆盖的区域还能识别；\n$size：控制生成图片的大小，默认为4；\n$margin：控制生成二维码的空白区域大小；\n$saveandprint：保存二维码图片并显示出来，$outfile必须传递图片路径;\n\n1. 生成二维码(文件流)\n$QR = QRcode::png($url, false, &#x27;L&#x27;, 5, 2);//生成二维码return $QR\n\n2. 生成二维码(文件)\n//生成二维码图片$filename = &#x27;qrcode/&#x27;.microtime().&#x27;.png&#x27;;QRcode::png($url,$filename,&#x27;L&#x27;,5,2);  //已经生成的原始二维码图片文件$QR = $filename;  $QR = imagecreatefromstring(file_get_contents($QR));   //输出图片imagepng($QR, &#x27;qrcode.png&#x27;);  imagedestroy($QR);return &#x27;&lt;img src=&quot;qrcode.png&quot; alt=&quot;&quot;&gt;&#x27;;   \n\n3. 二维码中加上logo(文件)\n//生成二维码图片$filename = &#x27;qrcode/&#x27;.microtime().&#x27;.png&#x27;;QRcode::png($url,$filename,&#x27;H&#x27;,6,2);$logo = &#x27;qrcode/logo.jpg&#x27;; // 准备好的logo图片$QR = $filename; // 已经生成的原始二维码图if (file_exists($logo)) &#123;    $QR = imagecreatefromstring(file_get_contents($QR));   \t\t//目标图象连接资源。    $logo = imagecreatefromstring(file_get_contents($logo));   \t//源图象连接资源。    $QR_width = imagesx($QR);\t\t\t//二维码图片宽度    $QR_height = imagesy($QR);\t\t\t//二维码图片高度    $logo_width = imagesx($logo);\t\t//logo图片宽度    $logo_height = imagesy($logo);\t\t//logo图片高度    $logo_qr_width = $QR_width / 4;   \t//组合之后logo的宽度(占二维码的1/5)    $scale = $logo_width/$logo_qr_width;   \t//logo的宽度缩放比(本身宽度/组合后的宽度)    $logo_qr_height = $logo_height/$scale;  //组合之后logo的高度    $from_width = ($QR_width - $logo_qr_width) / 2;   //组合之后logo左上角所在坐标点    //重新组合图片并调整大小    /*     *\timagecopyresampled() 将一幅图像(源图象)中的一块正方形区域拷贝到另一个图像中     */    imagecopyresampled($QR, $logo, $from_width, $from_width, 0, 0, $logo_qr_width,$logo_qr_height, $logo_width, $logo_height);&#125;//输出图片imagepng($QR, &#x27;qrcode.png&#x27;);imagedestroy($QR);imagedestroy($logo);return &#x27;&lt;img src=&quot;qrcode.png&quot; alt=&quot;&quot;&gt;&#x27;;\n\n\n输出 base64 图片流//生成二维码图片 并转为base64ob_start(); //开启缓冲区QRcode::png($url, false, &#x27;L&#x27;, 5, 2);//生成二维码$img = ob_get_contents(); //获取缓冲区内容ob_end_clean(); //清除缓冲区内容$imgInfo = &#x27;data:png;base64,&#x27; . chunk_split(base64_encode($img));//转base64ob_flush();echo $imgInfo;\n\n\n参考资料\n\n(使用phpqrcode生成二维码)[https://blog.csdn.net/sinat_35861727/article/details/73862991]\n( PHP用Qrcode生成二维码base64流\n\n)[https://www.cnblogs.com/wanghaodong/p/11120051.html]\n","categories":["PHP"],"tags":["PHP"]},{"title":"phpstudy mysql启动不了","url":"/2021/03/07/phpstudy-mysql%E5%90%AF%E5%8A%A8%E4%B8%8D%E4%BA%86/","content":"问题手动的将 MySQL 服务开启，使MySQL可以通过命令行控制后，phpstudy 就无法启动 mysql了，只能在命令行中控制。\n解决暂无解决办法\n软件和命令行只能取其一\n开启或关闭MySQL服务见MySQL数据库崩溃\n","categories":["MySql"]},{"title":"php与js时间戳相互转换","url":"/2021/03/12/php%E4%B8%8Ejs%E6%97%B6%E9%97%B4%E6%88%B3%E7%9B%B8%E4%BA%92%E8%BD%AC%E6%8D%A2/","content":"php方法 time();    获取现在时间得到10位数，单位秒js new Date();Date.getTime();    获取现在时间得到13位数字，单位毫秒\nphp传到js的时间戳 要*1000可以正确解读；var time = new Date(parseInt(phptime)*1000)\n\n参考资料： \n\nphp与js时间戳相互转换\n\n","categories":["杂谈"]},{"title":"php的ts,nts","url":"/2021/04/05/php%E7%9A%84ts-nts/","content":"\n来源：php的ts,tns_兔子的博客-CSDN博客\n\n1. 简介ts(Thread-Safety)即线程安全，多线程访问时，采用了加锁机制，当一个线程访问该类的某个数据时，进行保护，其他\n线程不能进行访问直到该线程读取完，其他线程才可使用。不会出现数据不一致或者数据污染php以ISAPI方\n式加载的时候选择这个版本，php以ISAPI方式加载的时候选择这个版本.\nnts(None-Thread Safe)即非线程安全，就是不提供数据访问保护，有可能出现多个线程先后更改数据造成所得到的是脏数据php以fast cgi方式运行的时候选择这个版本，具有更好的性能；\nISAPI(Internet Server Application Programming Interface), 通常是指被http服务器所加载，以服务器的模块形式运行，由微 软提出，故只能在win平台上运行，例如win下的apache,iis[据说用fast cgi 方式工作更稳定]，而linux上php则以 Apache模块或者php-fpm的方式运行。\ncgi(Common Gateway Interface):HTTP服务器与你的或其它机器上的程序进行“交谈”的一种工具,说白了，cig就是一种后台语言，其可以和服务器之间进行通讯。此时的php是作为一个独立的程序运行的。特点就是耗费内存。\nfast cgi.是一个常驻(long-live)型的CGI，它可以一直执行着，只要激活后，不会每次都要花费时间去fork.这种方式是与语言无关的、可伸缩架构的CGI开放扩展，其主要行为是将CGI解释器进程保持在内存中并因此获得较高的性能。\ncgi和fast cgi的区别找度娘。\n2.选择 通常win下php和apache组合，以isapi的方式运行，而linux下可以是apche+php，php常常作为apache的模块，而nginx+php时，phpfast cgi的方式，即php-fpm的方式跑。\n   据说php-fpm这种方式释放了web服务器，使其仅仅处理请求和并发，而php处理则交php-fpm完成，故 nginx+php现在很受青睐\nTS指Thread Safety，即线程安全，一般在IIS以ISAPI方式加载的时候选择这个版本。NTS即None-Thread Safe，一般以fast cgi方式运行的时候选择这个版本，具有更好的性能。具体：从2000年10月20日发布的第一个Windows版的PHP3.0.17开始的都是线程安全的版本，这是由于与Linux/Unix系统是采用多进程的工作方式不同的是Windows系统是采用多线程的工作方式。如果在IIS下以CGI方式运行PHP会非常慢，这是由于CGI模式是建立在多进程的基础之上的，而非多线程。一般我们会把PHP配置成以ISAPI的方式来运行，ISAPI是多线程的方式，这样就快多了。但存在一个问题，很多常用的PHP扩展是以Linux/Unix的多进程思想来开发的，这些扩展在ISAPI的方式运行时就会出错搞垮IIS。因此在IIS下CGI模式才是 PHP运行的最安全方式，但CGI模式对于每个HTTP请求都需要重新加载和卸载整个PHP环境，其消耗是巨大的。为了兼顾IIS下PHP的效率和安全，微软给出了FastCGI的解决方案。FastCGI可以让PHP的进程重复利用而不是每一个新的请求就重开一个进程。同时FastCGI也可以允许几个进程同时执行。这样既解决了CGI进程模式消耗太大的问题，又利用上了CGI进程模式不存在线程安全问题的优势。因此：如果是使用ISAPI的方式来运行PHP就必须用Thread Safe(线程安全)的版本；而用FastCGI模式运行PHP的话就没有必要用线程安全检查了，用None Thread Safe(NTS，非线程安全)的版本能够更好的提高效率。\n通过phpinfo();打印环境查看其中的 Thread Safety 项，这个项目就是查看是否是线程安全如果是：enabled，一般来说应该是ts版，否则是nts版。\n"},{"title":"pm2项目启动成功，但pm2 list又显示errored的问题","url":"/2021/03/07/pm2%E9%A1%B9%E7%9B%AE%E5%90%AF%E5%8A%A8%E6%88%90%E5%8A%9F%EF%BC%8C%E4%BD%86pm2-list%E5%8F%88%E6%98%BE%E7%A4%BAerrored%E7%9A%84%E9%97%AE%E9%A2%98/","content":"\n首先先判断入口js文件app.js在node上是否能正确运行，确定是否缺少依赖。如若缺少则安装对应的依赖再进行pm2管理。\n\n如若node能正常运行，pm2也能正常启动，但在使用pm2 list命令查看列表时项目出现errored，则尝试以下两行命令\n\n\n来自anlondon博客\nps aux | grep pm2 (查看pm2进程占用情况)kill -9  14360 (这个数值要依据你上面命令返回的进程id进行填写)\n\n杀死pm2进程之后再次重启项目，解决问题。\n\n也可以通过pm2 show id来查看详细的错误信息，进行对应的处理\n\n","categories":["pm2"]},{"title":"python 批量压缩图片","url":"/2021/03/07/python-%E6%89%B9%E9%87%8F%E5%8E%8B%E7%BC%A9%E5%9B%BE%E7%89%87/","content":"\n上源码\nfrom PIL import Imageimport osimport time# 获取图片文件的大小def get_size(file):    # 获取文件大小:KB    size = os.path.getsize(file)    return size / 1024# 拼接输出文件地址def get_outfile(infile, outfile):    if outfile:        return outfile    dir, suffix = os.path.splitext(infile)    #outfile = &#x27;&#123;&#125;-out&#123;&#125;&#x27;.format(dir, suffix)    outfile = &#x27;&#123;&#125;&#123;&#125;&#x27;.format(dir, suffix)    print(outfile)    return outfile,suffix# 压缩文件到指定大小，我期望的是150KB,step和quality可以修改到最合适的数值def compress_image(infile, outfile=&#x27;&#x27;, mb=250, step=10, quality=80):    &quot;&quot;&quot;不改变图片尺寸压缩到指定大小    :param infile: 压缩源文件    :param outfile: 压缩文件保存地址    :param mb: 压缩目标，KB    :param step: 每次调整的压缩比率    :param quality: 初始压缩比率    :return: 压缩文件地址，压缩文件大小    &quot;&quot;&quot;    o_size = get_size(infile)    if o_size &lt;= mb:        return infile    outfile,suffix = get_outfile(infile, outfile)    #if suffix    while o_size &gt; mb:        im = Image.open(infile)        #im = Image.fromarray(infile)        im.save(outfile, quality=quality)        #im.convert(&#x27;RGB&#x27;).save(outfile, quality=quality)        if quality - step &lt; 0:            break        quality -= step        o_size = get_size(outfile)    return outfile, get_size(outfile)# 修改图片尺寸，如果同时有修改尺寸和大小的需要，可以先修改尺寸，再压缩大小#x_s=1376def resize_image(infile, outfile=&#x27;&#x27;, x_s=320):    &quot;&quot;&quot;修改图片尺寸    :param infile: 图片源文件    :param outfile: 重设尺寸文件保存地址    :param x_s: 设置的宽度    :return:    &quot;&quot;&quot;    im = Image.open(infile)    x, y = im.size    y_s = int(y * x_s / x)    out = im.resize((x_s, y_s), Image.ANTIALIAS)    outfile = get_outfile(infile, outfile)    out.save(outfile)# 获取文件夹下所有文件def listdir(path, list_name):  #传入存储的list    for file in os.listdir(path):        file_path = os.path.join(path, file)          if os.path.isdir(file_path):            listdir(file_path, list_name)          else:            list_name.append(file_path)if __name__ == &#x27;__main__&#x27;:    list = []    listdir(&#x27;./1/&#x27;,list)    for li in list:        #print(li)        compress_image(li)        #resize_image(li)        #break\n\n\n相关资料：\n\n总结python处理图片等比例压缩与质量处理的方法\n\n","categories":["Python"]},{"title":"fastadmin  Summernote 不加载显示","url":"/2021/06/03/stadmin-Summernote-%E4%B8%8D%E5%8A%A0%E8%BD%BD%E6%98%BE%E7%A4%BA/","content":"起因使用fast admin开发时，使用命令管理生成了一个页面，页面中的textarea,也添加了class=&quot;editor&quot;，但始终不显示summernote编辑插件。\n而其他页面的textarea只要添加了class=&quot;editor&quot;就会显示。\n解决根据fastadmin手册|富文本编辑器 这里的说明，加上对其他页面的研究，最终找到了方法。\n\n\n首先找到页面对应的js文件。(一般在public\\assets\\js\\backend\\中)fast admin使用requestjs来控制js插件，其中index:funxtion()&#123;&#125;表示index.html页面的控制器。\n\n修改html文件\n\n再次刷新，页面就加载富文本编辑器了\n\n\n","categories":["fastadmin"]},{"title":"1.1安装swoole","url":"/2021/06/21/swoole/","content":"1.1安装swoolewget方式 centos\n下载#wget https://pecl.php.net/get/swoole-4.2.0.tgz\n解压#tar -zxf swoole-4.2.0.tgz\n进入#cd swoole-4.2.0\n安装依赖#yum -y install gcc gcc-c++ autoconf pcre-devel make当然php也是不可少的\n初始化环境#phpize\n编译#./configure简单编译，后期可以添加参数\n安装#make &amp;&amp; make install\n配置 安装成功后在php.ini中加入extension=swoole.so\n测试 #php -m或#php -r &#39;echo phpinfo();&#39;查看swoole是否可用php-peal方式 centos\n#yum install php-peal[^报错]\n#peal install swoole\n配置 安装成功后在php.ini中加入extension=swoole.so\n测试 #php -m或#php -r &#39;echo phpinfo();&#39;查看swoole是否可用\n\n  [^报错]: 如果报  php72w-common conflicts with php-common-5.4.16-46.el7.x86_64 类似的错误，可以查看【linux】 -&gt; 【php72w-common conflicts with php-common-5.4.16-46.el7.x86_64】 这篇文章\n","categories":["swoole","基础了解"],"tags":["swoole"]},{"title":"this.setData is not a function","url":"/2021/06/21/this-setData-is-not-a-function/","content":"ata里设置好一个数据变量，在回调函数里this.setData(&#123;data:xxx&#125;)给该变量赋值,不仅无法赋值还报错误信息TypeError: this.setData is not a function\n表面看是类型错误，可是取到的数据没有错误。原因就是this关键字，不能直接在请求的回调函数里写this，应该在请求外声明一个变量，接收onload函数的this,这样就不会报错了\n\n","categories":["微信"],"tags":["微信"]},{"title":"tp5 事务内多种sql方法错误","url":"/2021/06/09/tp5-%E4%BA%8B%E5%8A%A1%E5%86%85%E5%A4%9A%E7%A7%8Dsql%E6%96%B9%E6%B3%95%E9%94%99%E8%AF%AF/","content":"问题在修改项目时，遇到一个新旧交替的地方，事务内既有sql语句，又有tp的模型对象,\n导致程序虽然能正常运行，sql语句也都是正常的，但是因为修改sql的方式不同，从而使模型修改的数据始终会被回滚\nDb::startTrans();        try&#123;            //更新茶碗数据            Db::name(&#x27;user_bowl&#x27;)-&gt;where(&#x27;user_id&#x27;,$user_id)-&gt;update([&#x27;bowl&#x27;=&gt;$after,&#x27;updatetime&#x27;=&gt;$time]);            //插入茶碗变更记录            Db::name(&#x27;user_bowl_log&#x27;)-&gt;insert([&#x27;user_id&#x27;=&gt;$user_id,&#x27;before&#x27;=&gt;$before,&#x27;after&#x27;=&gt;$after,&#x27;memo&#x27;=&gt;$memo,&#x27;createtime&#x27;=&gt;$time]);            //修改优惠券状态            $Coupons = \\addons\\shopro\\model\\Coupons($id);            $Coupons-&gt;status = 1;//已被领取            $Coupons::save();            Db::commit();        &#125; catch (\\Exception $e) &#123;            Db::rollback();            //return $e;            return false;        &#125;\n\n运行上述代码，不会报任何错误，检查数据库，除了Coupons模型对应的数据表，其他的表数据都正常改变了。\n最后不得已，只好修改模型方法为db::name()的方式，才正常。\n具体原因，就不得而知了\n"},{"title":"ftp多用户配置","url":"/2021/03/07/tp%E5%A4%9A%E7%94%A8%E6%88%B7%E9%85%8D%E7%BD%AE/","content":"起因一个客户要求一个文件夹里的不同子目录需要不同的ftp账号进行管理，例如下面，这是一位客户的要求\nFTP1，不绑定域名，有读写权限，预先建立以下目录结构：    /bootstrap    /bootstrap/resources    /bootstrap/resources/attachment    /bootstrap/resources/skinFTP2，绑定域名sso.xxx.com、www.xxx.com、data.xxx.com，有读写权限；路径为\t/bootstrapFTP3，绑定域名file.xxx.com，有读写权限；路径为\t/bootstrap/resources/attachment    FTP4，绑定域名skin.xxx.com，有读写权限；路径为\t/bootstrap/resources/skinFTP5，绑定域名ress.xxx.com，有读写权限；路径为\t/bootstrap/resources\n\n问题建立多层级目录，和对应的ftp后，发现只有父级目录的ftp账号能链接访问，而子级ftp账号却显示不能链接，\n比如使用 FTP1 连接时，可以访问 /bootstrap ，但是子级目录却只能看不能进入访问\n而使用剩余的账号访问时，直接就拒绝访问了。\n解决这是因为在建立ftp时，对应的目录的所有者会变为对应的ftp账号，而其他账号会因为没有访问权限而被阻止访问。\n例如在建立 FTP1 时，/bootstrap目录的所有者会变为 FTP1 账号。而建立其他账号时，也相应的改变了对应目录的所有者权限，但是父级目录的权限却并没有改变。所以需要给父级目录分别添加上对应的子级账号访问控制权限即可。\n\n在父级目录 给 子级账号访问权限\n同时也要在子级目录 给 FTP1 访问权限\n\n\n注意：只需要在父级目录修改权限即可，子级目录会自动继承父级栏目的权限设定\n\n","categories":["FTP"]},{"title":"vim 特殊字符显示不全","url":"/2021/03/07/vim-%E7%89%B9%E6%AE%8A%E5%AD%97%E7%AC%A6%E6%98%BE%E7%A4%BA%E4%B8%8D%E5%85%A8/","content":"问题电脑系统 : win7putty : Release 0.74\n最近在搞 vim7.4 的时候，遇到特殊字符显示乱码的问题，刚开始以为是系统输出和插件版本的问题，后来在手机上连接的时候发现手机上却没有问题。\n\n电脑上：\n手机上：\n\n解决\n设置输出编码在 ~/.vimrc 中添加以下代码，设置输出编码具体的见 vim 编码设置讲解&quot;设置编码自动识别set termencoding=utf-8set fileencoding=chinese set fileencodings=ucs-bom, utf-8, chinese set langmenu=zh_CN. utf-8\n切换字体；因为 putty 软件默认的字体是 courier New ，而该字体win7上没有，所以切换为 新宋体 即可。\n注意：字符涵盖最多的是 Unicode 的，它包含了全球所有语言的文字和特殊字符，导致 Unicode 字库很庞大，一般字体并不会完全包含，只会选取常用的特殊字符编进字体软件中。初始设置：\n\n\n\n 手动修改为 新宋体 ，并调整光标样式： \n\n选择 粗体，不然字体很细 附上中文翻译 \n\n最后附上调整后的样式\n\n当然并不是所有的特殊字符都能正常显示，这个就只能手动调整了\n\n最后，如果是愿意折腾的小伙伴，可以看看相关资料的第二个链接，里面也有人遇到相似的问题，也有大佬提出了一些建议和办法。\n\n相关资料：\n\nvim 编码设置讲解\n如何配置PuTTY显示这些字符？\n\n","categories":["Vim"]},{"title":"xdebug断掉调试经常无故断开","url":"/2021/03/07/xdebug%E6%96%AD%E6%8E%89%E8%B0%83%E8%AF%95%E7%BB%8F%E5%B8%B8%E6%97%A0%E6%95%85%E6%96%AD%E5%BC%80/","content":"需要在vhost.conf中加上两行\nIPCConnectTimeout 3000IPCCommTimeout 3000\n\n&lt;VirtualHost *:80&gt;\tDocumentRoot &quot;D:/phpstudy_pro/WWW/login&quot;\tServerName www.1688.net\tServerAlias    FcgidInitialEnv PHPRC &quot;D:/phpstudy_pro/Extensions/php/php-5.6.27-nts&quot;    AddHandler fcgid-script .php    #加入以下两行    IPCConnectTimeout 3000    IPCCommTimeout 3000#end     FcgidWrapper &quot;D:/phpstudy_pro/Extensions/php/php-5.6.27-nts/php-cgi.exe&quot; .php    &lt;Directory &quot;D:/phpstudy_pro/WWW/login&quot;&gt;    Options FollowSymLinks ExecCGI    AllowOverride All    Order allow,deny    Allow from all    Require all granted    DirectoryIndex index.php index.html    &lt;/Directory&gt;&lt;/VirtualHost&gt;","categories":["PHP"]},{"title":"一场失眠的胡思乱想","url":"/2021/03/07/%E4%B8%80%E5%9C%BA%E5%A4%B1%E7%9C%A0%E7%9A%84%E8%83%A1%E6%80%9D%E4%B9%B1%E6%83%B3/","content":"失眠了，，，，外面下着小雨，我躲在被窝里，想着星空。\n都说即使在阴沟也要抬头望着星空，就是不知道星空是否也在低头望着我？\n","categories":["生活"]},{"title":"为Hexo博客添加脚注插件","url":"/2021/03/07/%E4%B8%BAHexo%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E8%84%9A%E6%B3%A8%E6%8F%92%E4%BB%B6/","content":"hexo自带的插件npm install hexo-reference --save\n\n语法[^1][1][^1]:内容\n\n〔如用了pm2来管理hexo server，需要完全关闭进程后再运行，才能生效〕\n其他来源：大专栏|为Hexo博客添加脚注插件\n注意： 文中涉及的markdown插件需要单独安装\nplugins:    - markdown-it-abbr    - markdown-it-footnote    - markdown-it-ins    - markdown-it-sub    - markdown-it-sup\n上面的所有插件都要安装npm i markdown-it-abbr markdown-it-footnote markdown-it-ins markdown-it-sub markdown-it-sup --save之后重启服务器即可生效\n注：以上的插件，都对base64支持不够，会导致页面不能正确的加载base64图片\n1.该插件为hexo原生的脚注插件，不需要任何配置，安装重启服务器即可用 ↩","categories":["Hexo"]},{"title":"phpstorm配置ftp自动同步到远程服务器","url":"/2021/03/12/%E4%BD%BF%E7%94%A8phpstorm%E5%B0%86%E6%9C%AC%E5%9C%B0%E4%BB%A3%E7%A0%81%E5%AE%9E%E6%97%B6%E8%87%AA%E5%8A%A8%E5%90%8C%E6%AD%A5%E5%88%B0%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8/","content":"\n来源：使用phpstorm将本地代码实时自动同步到远程服务器作者：TXXT|博客园\n\n平常在维护网站的时候，经常遇到网站代码需要修改的地方，一般情况下就是先使用FTP传输传输到本地然后修改完毕再上传，或者你使用宝塔面板或者windows服务器也可以直接在服务器上编辑代码，这样的操作如果是小小的改动一下是没问题很简单，但是如果修改的地方很麻烦，需要不断调试，那么这简直就是一种折磨，所以你就要想一个更省事的办法了，今天主机笔记就为大家介绍使用JetBrains家的phpstorm实现远程编码，本地编辑实时自动同步到远程web服务器。\n本地连接配置web服务器要实现远程编码，首先我们要把我们本地的webstom项目连接到服务器，最好的方法就是使用FTP连接我们的网站或者项目\n在webstom编辑器依次选择 Tools – Deployment – Configuration，添加一个远程主机，这个名字只是备注用，随便写，协议选择FTP(也支持SFTP、本地等)\n\n\n这个时候就是主要就是填写远程主机的FTP信息了，除了基本的FTP信息填写完毕外，其他需要修改的我在图上用箭头标出\nRoot path  这个选项是要打开的路径，这样做主要是为了防止误操作影响项目，填写后上级目录不会展示，当然你可以不写\nAdvanced options 这个选项是设置 Passive mode 设置FTP连接模式为被动模式\nWeb server root URL   这里就是调试的网址\n当所有的信息确认无误后，点击一下 Test FTP connection，测试是否连接成功\n\n最后，我们再调整一下本地和远程主机的映射即可，如果要添加了多个远程主机的话，记得把要使用的项目点击一下 Use this server as default\n远程主机配置好后我们就可以看一下目录结构了，点击 Tools – Deployment – Broswse Remote Host，然后就会看到远程的文件了\n这个时候其实我们本地还没有文件，要把远程的项目下载到本地，在远程主机上右键 – Download from here即可，稍等一会下载完毕，本地项目即可显示\n设置代码自动同步到远程服务器在前面我们已经把本地文件和远程文件对接上了，但是这时候要实现同步还是要手动传输的，距离实现自动化还差一点点\n打开 Tools – Deployment – Options，我们把Upload changed files 一项改为 On explicit save action，意思也就是每次保存都会同步到远程服务器\n\n到这里，基本设置完毕，可以看到我下面的测试，完全是在本地操作，自动在服务器创建新的文件，而且本地每保存一次，就会自动的传输到服务器并记录日志\n\n\n可能遇到的问题测试连接成功，但是却始终无法上传，在配置界面出现如下提示：Automatic upload will not work，because default server&#39;蓝轩小程序”has no valid mappings.\n\n\n参考：Default server mservice has no valid mappings. Automatic upload is not enabled\n","categories":["杂谈"]},{"title":"使用tp/queue::later时的奇妙问题","url":"/2021/06/09/%E4%BD%BF%E7%94%A8tp-queue-later%E9%81%87%E5%88%B0%E7%9A%84%E5%A5%87%E5%A6%99bug/","content":"配置\nphp 7.19\nthinkphp 5\nfastadmin 2.0\ntopthink/think-queue 1.1.6\n\n问题在弄项目时，遇到一个神奇的问题，明明sql语句没有问题，调试运行都没有问题，但是在程序完整执行后，数据库并没有变化。\n解决因为sql语句是写在事务闭包内的，本以为是事务导致的。但是逐句排查后，发现是queque队列执行了【设定的取消程序】导致的。\n$close_minue = 1440;\\think\\Queue::later(($close_minue * 60), &#x27;\\addons\\shopro\\job\\OrderAutoOper@autoClose&#x27;, [&#x27;order&#x27; =&gt; $order], &#x27;shopro&#x27;);\n\n上述代码，目的是一天后用户没有支付，则自动关闭订单，写法没有错误。\n但是因为queue设置里为Sync选项，默认同步执行，\nclass Sync extends Connector&#123;    public function later($delay, $job, $data = &#x27;&#x27;, $queue = null)    &#123;        return $this-&gt;push($job, $data, $queue);    &#125;\n\n可见，sync同步队列里并没有使用设定的时间，自然不会延时执行。这可真是同步啊！！\n之后修改队列默认设置，保存，问题解决。\n\n其他资料\n\n官方手册\nthink-queue详细介绍与使用|简书\n\n"},{"title":"念想","url":"/2021/06/30/%E4%BF%A1%E4%BB%B0/","content":"总得有个念想。\n才不至于浑浑噩噩，能靠着这点念想给的安全感睡下。\n","categories":["生活"]},{"title":"利用cmd命令进行ftp文件上传和下载","url":"/2021/03/19/%E5%88%A9%E7%94%A8cmd%E5%91%BD%E4%BB%A4%E8%BF%9B%E8%A1%8Cftp%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%92%8C%E4%B8%8B%E8%BD%BD/","content":"\n心血来潮试了下 cmd 下的 ftp，用着难受，确实没有 Linux 中的 pscp 好用。\n\nWin + R 输入cmd，进入命令行\n#连接C:\\&gt; ftp www.xxxx.com [ip也可以]#之后输入用户名和密码即可\n\nftp在cmd下常用命令\n\ncmd下 ftp 不能上传下载文件夹\n\n\n\n\nftp\n服务器地址    登陆ftp\n\n\n\npwd\n检查ftp当前目录\n\n\ndir\n显示远程主机目录\n\n\ncd remote-dir\n进入远程主机目录\n\n\nhelp[cmd]\n显示ftp内部命令cmd的帮助信息，如：help get\n\n\nget remote-file[local-file]\n将远程主机的单个文件remote-file传至本地硬盘的local-file(本地文件夹)\n\n\nmget  remote-file[local-file]\n可以通过 * 将远程主机的多个文件remote-file传至本地硬盘的local-file(本地文件夹)如：mget *  下载所有文件和文件夹到本地，mget *.txt 下载以.txt 结尾的文件到本地\n\n\nput local-file[remote-file]\n将本地单个文件local-file传送至远程主机\n\n\nmput  remote-file[local-file]\n可以通过 * 将本地单个文件local-file传送至远程主机。如：mget *  上传本地该目录下所有文件和文件夹到远程主机，mput *.txt 上传以.txt 结尾的文件到本地\n\n\ndelete remote-file\n删除远程主机单个文件\n\n\nmdelete remote-file\n可以通过 * 删除远程主机多个文件。如mdelete *.txt  删除空间下所有以.txt 结尾的文件，mdelete *   删除所有文件。\n\n\nclose\n注销\n\n\nquit\n同bye，退出ftp会话\n\n\n\n参考资料：\n\nWindows下利用cmd命令进行ftp文件上传和下载（附常用命令）\n\n","categories":["杂谈"]},{"title":"将commit内容reset到另一个分支提交","url":"/2021/07/23/%E5%B0%86commit%E5%86%85%E5%AE%B9reset%E5%88%B0%E5%8F%A6%E4%B8%80%E4%B8%AA%E5%88%86%E6%94%AF%E6%8F%90%E4%BA%A4/","content":" 使用的指令 git cherry-pick &lt;commit id&gt;\n git loggit checkout branch-name                           //切换到需要提交的分支git status                                        //检查项目状态git cherry-pick  &lt;commit id&gt;          // 对已经存在的commit进行apply (可以理解为再次提交）\n\n更多见git-cherry-pick\n\n","categories":["Git"],"tags":["Git"]},{"title":"小程序统一消息接口遇坑","url":"/2021/04/27/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%BB%9F%E4%B8%80%E6%B6%88%E6%81%AF%E6%8E%A5%E5%8F%A3%E9%81%87%E5%9D%91/","content":"\n参考：微信小程序的统一服务消息 uniformMessage.send微信统一消息接口手册：uniformMessage.send\n\n\n注意：\n\n小程序每次推送消息，都必须获得用户同意才会推送，如果没有弹窗提示让用户同意，则默认用户不同意\n公众号推送消息，需要用户关注过该公众号\n统一消息接口有点坑\n\n\n$list = [                    &#x27;touser&#x27;=&gt; $data_2[&#x27;openid&#x27;],//用户openid                    &#x27;weapp_template_msg&#x27;=&gt;[], //小程序消息模板  为空即可，否则会提示api支持                    // &#x27;weapp_template_msg&#x27;=&gt;[//小程序消息模板                    //     &#x27;template_id&#x27;=&gt;$data[&#x27;template_id&#x27;],                    //     &#x27;page&#x27;=&gt;$data_2[&#x27;page&#x27;],                    //     &#x27;form_id&#x27;=&gt;$data[&#x27;template_id&#x27;],                    //     &#x27;data&#x27;=&gt;$data_2[&#x27;data&#x27;],                    // ],                    &#x27;mp_template_msg&#x27;=&gt;[//公众号消息模板                        &#x27;appid&#x27;=&gt;&#x27;wxb74bbd0e43f82f&#x27;,                        &#x27;template_id&#x27;=&gt;$data[&#x27;template_id&#x27;],                        &#x27;url&#x27;=&gt;&#x27;&#x27;,                        &#x27;miniprogram&#x27;=&gt;[                            //&#x27;appid&#x27;=&gt;&#x27;gh_13c04895&#x27;, //不要填写 appid,否则会报 ‘errcode:40013,errmsg:invalid appid’的错                            &#x27;appid&#x27;=&gt;&#x27;&#x27;,                            &#x27;pagepath&#x27;=&gt;$data_2[&#x27;page&#x27;],                        ],                        &#x27;data&#x27;=&gt;[                            &#x27;first&#x27;=&gt;[&#x27;value&#x27;=&gt;&#x27;余额变动通知&#x27;],                            &#x27;keyword2&#x27;=&gt;$data_2[&#x27;data&#x27;][&#x27;amount3&#x27;],//变动金额                            &#x27;keyword1&#x27;=&gt;$data_2[&#x27;data&#x27;][&#x27;thing2&#x27;], //资金类型                            &#x27;keyword4&#x27;=&gt;$data_2[&#x27;data&#x27;][&#x27;amount4&#x27;],//当前余额                            &#x27;keyword3&#x27;=&gt;$data_2[&#x27;data&#x27;][&#x27;time1&#x27;],  //变动时间                            &#x27;remark&#x27;=&gt;$data_2[&#x27;data&#x27;][&#x27;thing5&#x27;],    //备注                        ]                    ],                ];                $result = (new \\addons\\shopro\\library\\Wechat(&#x27;wxMiniProgram&#x27;))-&gt;getApp()-&gt;uniform_message-&gt;send($list);                //var_dump($result);//var_dump($list);array(3) &#123; [&quot;touser&quot;]=&gt; string(28) &quot;oQJOs5inOXtiLQND5BqSJreM&quot; [&quot;weapp_template_msg&quot;]=&gt; array(0) &#123; &#125; [&quot;mp_template_msg&quot;]=&gt; array(5) &#123; [&quot;appid&quot;]=&gt; string(18) &quot;wxb74bbd0e43f82f&quot; [&quot;template_id&quot;]=&gt; string(43) &quot;wFhwFh0R8I4jGy7jGgWlVtxJvMM59WvE1VahS2c&quot; [&quot;url&quot;]=&gt; string(0) &quot;&quot; [&quot;miniprogram&quot;]=&gt; array(2) &#123; [&quot;appid&quot;]=&gt; string(0) &quot;&quot; [&quot;pagepath&quot;]=&gt; string(53) &quot;pages/index/index?page=%2Fpages%2Fuser%2Fwallet%2Flog&quot; &#125; [&quot;data&quot;]=&gt; array(6) &#123; [&quot;first&quot;]=&gt; array(1) &#123; [&quot;value&quot;]=&gt; string(18) &quot;余额变动通知&quot; &#125; [&quot;keyword2&quot;]=&gt; array(1) &#123; [&quot;value&quot;]=&gt; string(6) &quot;100.00&quot; &#125; [&quot;keyword1&quot;]=&gt; array(1) &#123; [&quot;value&quot;]=&gt; string(12) &quot;后台充值&quot; &#125; [&quot;keyword4&quot;]=&gt; array(1) &#123; [&quot;value&quot;]=&gt; string(8) &quot;11601.00&quot; &#125; [&quot;keyword3&quot;]=&gt; array(1) &#123; [&quot;value&quot;]=&gt; string(19) &quot;2021-04-27 14:19:47&quot; &#125; [&quot;remark&quot;]=&gt; array(1) &#123; [&quot;value&quot;]=&gt; string(1) &quot;-&quot; &#125; &#125; &#125; &#125;\n\n注意：\n\n在官方示例中，$list[&#39;weapp_template_msg&#39;],中填写了信息的，但是测试的时候，$list[&#39;weapp_template_msg&#39;]如果有参数，则会提示\n&#123; [&quot;errcode&quot;]=&gt; int(45103)   [&quot;errmsg&quot;]=&gt; string(61) &quot;This API has been unsupported&quot; &#125; 因此，$list[&#39;weapp_template_msg&#39;]=[]即可\n\n\n$list[&#39;mp_template_msg&#39;][&#39;miniprogram&#39;][&#39;appid&#39;],也最好为空，或者不写该参数，否则会返回\n &#123; [&quot;errcode&quot;]=&gt; int(40013) [&quot;errmsg&quot;]=&gt; string(45) &quot;invalid appid&quot; &#125; 说是appid不匹配，不填该参数，依旧能在推送的微信公众号的提示内容中进入小程序。\n\n\n\n","categories":["微信"]},{"title":"缺少 「secure」 cookie 已拒绝 “ci-session”","url":"/2021/03/07/%E5%B0%91-%E3%80%8Csecure%E3%80%8D-cookie-%E5%B7%B2%E6%8B%92%E7%BB%9D-%E2%80%9Cci-session%E2%80%9D/","content":"问题缺少 「secure」属性， cookie 已拒绝 “ci-session”\n最近在做公司的一个抽奖活动项目，由于是手机端，所以没有设置cookie的保存时间，即默认cookie为临时会话，当用户关闭浏览器或者关闭网页cookie就会过期。\n但是在测试时，明明没有关闭网页和浏览器，刚刚登陆过一会就又跳转到登陆页面，查看浏览器控制台，显示上面的信息。ci-session 为后台设置的cookie_name\n解决在 cookie 设置中，将$config[&#39;cookie_secure&#39;]的值改为TRUE，问题解决\n\n相关资料：\n\nCookie 的 SameSite 属性 |CSDN 我依旧满足于那么的不自信\n\n","categories":["cookie"]},{"title":"常用 Git 命令清单","url":"/2021/03/09/%E5%B8%B8%E7%94%A8-Git-%E5%91%BD%E4%BB%A4%E6%B8%85%E5%8D%95/","content":"\n来源：常用 Git 命令清单作者：阮一峰\n\n我每天使用 Git ，但是很多命令记不住。\n一般来说，日常使用只要记住下图6个命令，就可以了。但是熟练使用，恐怕要记住60～100个命令。\n\n下面是我整理的常用 Git 命令清单。几个专用名词的译名如下。\n\n\nWorkspace：工作区\nIndex / Stage：暂存区\nRepository：仓库区（或本地仓库）\nRemote：远程仓库\n\n\n一、新建代码库# 在当前目录新建一个Git代码库$ git init# 新建一个目录，将其初始化为Git代码库$ git init [project-name]# 下载一个项目和它的整个代码历史$ git clone [url]\n\n二、配置Git的设置文件为.gitconfig，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。\n# 显示当前的Git配置$ git config --list# 编辑Git配置文件$ git config -e [--global]# 设置提交代码时的用户信息$ git config [--global] user.name &quot;[name]&quot;$ git config [--global] user.email &quot;[email address]&quot;\n\n三、增加/删除文件# 添加指定文件到暂存区$ git add [file1] [file2] ...# 添加指定目录到暂存区，包括子目录$ git add [dir]# 添加当前目录的所有文件到暂存区$ git add .# 添加每个变化前，都会要求确认# 对于同一个文件的多处变化，可以实现分次提交$ git add -p# 删除工作区文件，并且将这次删除放入暂存区$ git rm [file1] [file2] ...# 停止追踪指定文件，但该文件会保留在工作区$ git rm --cached [file]# 改名文件，并且将这个改名放入暂存区$ git mv [file-original] [file-renamed]\n\n四、代码提交# 提交暂存区到仓库区$ git commit -m [message]# 提交暂存区的指定文件到仓库区$ git commit [file1] [file2] ... -m [message]# 提交工作区自上次commit之后的变化，直接到仓库区$ git commit -a# 提交时显示所有diff信息$ git commit -v# 使用一次新的commit，替代上一次提交# 如果代码没有任何新变化，则用来改写上一次commit的提交信息$ git commit --amend -m [message]# 重做上一次commit，并包括指定文件的新变化$ git commit --amend [file1] [file2] ...\n\n五、分支# 列出所有本地分支$ git branch# 列出所有远程分支$ git branch -r# 列出所有本地分支和远程分支$ git branch -a# 新建一个分支，但依然停留在当前分支$ git branch [branch-name]# 新建一个分支，并切换到该分支$ git checkout -b [branch]# 新建一个分支，指向指定commit$ git branch [branch] [commit]# 新建一个分支，与指定的远程分支建立追踪关系$ git branch --track [branch] [remote-branch]# 切换到指定分支，并更新工作区$ git checkout [branch-name]# 切换到上一个分支$ git checkout -# 建立追踪关系，在现有分支与指定的远程分支之间$ git branch --set-upstream [branch] [remote-branch]# 合并指定分支到当前分支$ git merge [branch]# 选择一个commit，合并进当前分支$ git cherry-pick [commit]# 删除分支$ git branch -d [branch-name]# 删除远程分支$ git push origin --delete [branch-name]$ git branch -dr [remote/branch]\n\n六、标签# 列出所有tag$ git tag# 新建一个tag在当前commit$ git tag [tag]# 新建一个tag在指定commit$ git tag [tag] [commit]# 删除本地tag$ git tag -d [tag]# 删除远程tag$ git push origin :refs/tags/[tagName]# 查看tag信息$ git show [tag]# 提交指定tag$ git push [remote] [tag]# 提交所有tag$ git push [remote] --tags# 新建一个分支，指向某个tag$ git checkout -b [branch] [tag]\n\n七、查看信息# 显示有变更的文件$ git status# 显示当前分支的版本历史$ git log# 显示commit历史，以及每次commit发生变更的文件$ git log --stat# 搜索提交历史，根据关键词$ git log -S [keyword]# 显示某个commit之后的所有变动，每个commit占据一行$ git log [tag] HEAD --pretty=format:%s# 显示某个commit之后的所有变动，其&quot;提交说明&quot;必须符合搜索条件$ git log [tag] HEAD --grep feature# 显示某个文件的版本历史，包括文件改名$ git log --follow [file]$ git whatchanged [file]# 显示指定文件相关的每一次diff$ git log -p [file]# 显示过去5次提交$ git log -5 --pretty --oneline# 显示所有提交过的用户，按提交次数排序$ git shortlog -sn# 显示指定文件是什么人在什么时间修改过$ git blame [file]# 显示暂存区和工作区的差异$ git diff# 显示暂存区和上一个commit的差异$ git diff --cached [file]# 显示工作区与当前分支最新commit之间的差异$ git diff HEAD# 显示两次提交之间的差异$ git diff [first-branch]...[second-branch]# 显示今天你写了多少行代码$ git diff --shortstat &quot;@&#123;0 day ago&#125;&quot;# 显示某次提交的元数据和内容变化$ git show [commit]# 显示某次提交发生变化的文件$ git show --name-only [commit]# 显示某次提交时，某个文件的内容$ git show [commit]:[filename]# 显示当前分支的最近几次提交$ git reflog\n\n八、远程同步# 下载远程仓库的所有变动$ git fetch [remote]# 显示所有远程仓库$ git remote -v# 显示某个远程仓库的信息$ git remote show [remote]# 增加一个新的远程仓库，并命名$ git remote add [shortname] [url]# 取回远程仓库的变化，并与本地分支合并$ git pull [remote] [branch]# 上传本地指定分支到远程仓库$ git push [remote] [branch]# 强行推送当前分支到远程仓库，即使有冲突$ git push [remote] --force# 推送所有分支到远程仓库$ git push [remote] --all\n\n九、撤销# 恢复暂存区的指定文件到工作区$ git checkout [file]# 恢复某个commit的指定文件到暂存区和工作区$ git checkout [commit] [file]# 恢复暂存区的所有文件到工作区$ git checkout .# 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变$ git reset [file]# 重置暂存区与工作区，与上一次commit保持一致$ git reset --hard# 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变$ git reset [commit]# 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致$ git reset --hard [commit]# 重置当前HEAD为指定commit，但保持暂存区和工作区不变$ git reset --keep [commit]# 新建一个commit，用来撤销指定commit# 后者的所有变化都将被前者抵消，并且应用到当前分支$ git revert [commit]# 暂时将未提交的变化移除，稍后再移入$ git stash$ git stash pop\n\n十、其他# 生成一个可供发布的压缩包$ git archive\n\n（完）\n","categories":["Git"]},{"title":"建立局域网git仓库","url":"/2021/03/07/%E5%BB%BA%E7%AB%8B%E5%B1%80%E5%9F%9F%E7%BD%91git%E4%BB%93%E5%BA%93/","content":"建立本地git仓库并共享\n新建一个文件夹，路径不要太长，最好是硬盘下的一级文件夹\n使用git init --bare建立一个仓库，该指令表示建立一个 独立的仓库 使用git init –bare建立一个本地裸仓库\n共享该目录，添加guest访客并给予读写权限\n右键该目录-&gt;属性-&gt;共享-&gt;高级共享，勾选共享此文件夹\n点击权限-&gt;给Everyone完全控制的权限-&gt;点击确定-&gt;点击应用来自anlondon博客来自anlondon博客    \n\n\n进入一个本地的项目，并且提交到本地仓库中 来自anlondon博客\n使用ipconfig查看本机的局域网ip,格式为 192.168.0.xxx\n\n在局域网的另一台电脑上拉取项目\n进入网络，可以看到共享的仓库 来自anlondon博客\ngit clone //192.168.0.xxx/test.git或者git pull //192.168.0.xxx来拉取项目 来自anlondon博客\n\n","categories":["Git"]},{"title":"微信8.0 浏览器不支持position:fixedFeb","url":"/2021/03/07/%E5%BE%AE%E4%BF%A18-0-%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%8D%E6%94%AF%E6%8C%81position-fixedFeb/","content":"问题修改一个页面，需要用到 position：fixed ,但是该属性在 微信8.0 的浏览器中并不能正常生效\n解决有网友说，可以参考 IE6 中处理 position：fixed 不生效的处理方法。\nie6 垂直居中固定定位，代码如下：#center &#123;  _position:absolute;  _top:expression(eval(document.compatMode &amp;&amp; document.compatMode==&#x27;CSS1Compat&#x27;) ? documentElement.scrollTop + (document.documentElement.clientHeight-this.offsetHeight)/2 :/*IE6*/document.body.scrollTop + (document.body.clientHeight - this.clientHeight)/2);/*IE5 IE5.5*/&#125;*html&#123;   background-image:url(about:blank);   background-attachment:fixed; &#125;\n\nie6 底部固定定位，代码如下：#bottom &#123;  _position: absolute;  _bottom: auto;  _top: expression(eval(document.documentElement.scrollTop+document.documentElement.clientHeight-this.offsetHeight-(parseInt(this.currentStyle.marginTop,10)||0)-(parseInt(this.currentStyle.marginBottom,10)||0)));&#125;*html&#123;   background-image:url(about:blank);   background-attachment:fixed; &#125;\n\nie6 头部固定定位，代码如下：#top &#123;  _position: absolute;  _bottom: auto;  _top: expression(eval(document.documentElement.scrollTop));&#125;*html&#123;   background-image:url(about:blank);   background-attachment:fixed; &#125;\n\n\n相关资料:\n\n求助：有谁解决过微信内置浏览器不兼容浮动的\nIE6解决固定定位代码\n\n","categories":["HTML"]},{"title":"微信小程序客服配置","url":"/2021/07/06/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AE%A2%E6%9C%8D%E9%85%8D%E7%BD%AE/","content":"前言# 建议各位先按底部的参考资料顺序查看，以便充分了解步骤以及设置要点\n配置：\n\nphp7.4\ntp5\neasyWechat\n\n部署一，验证token根据消息推送|token 验证的说明，在配置消息推送时，需要在对应的请求里添加操作\n$signature = $_GET[&quot;signature&quot;];        $timestamp = $_GET[&quot;timestamp&quot;];        $nonce = $_GET[&quot;nonce&quot;];        $tmpArr = array($this-&gt;Token, $timestamp, $nonce);        sort($tmpArr, SORT_STRING);        $tmpStr = implode( $tmpArr );        $tmpStr = sha1( $tmpStr );        if($tmpStr == $signature)            return true;        else            return false;\n\n后端完整代码\n&lt;?phpnamespace addons\\shopro\\controller;use addons\\shopro\\library\\Wechat as WechatLibrary;use think\\Request;/** * 微信小程序客服接口 */class WechatKefu extends Base&#123;    protected $noNeedLogin = [&#x27;*&#x27;];    protected $noNeedRight = [&#x27;*&#x27;];    protected $app = null;    protected $Token = null;    protected $EncodingAESKey = null;    // https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=wx****&amp;secret=&#x27;***&#x27;; //替换成自己的小程序id和secret    protected $get_accessToken_url = &#x27;https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&#x27;; // 获取accessToken    protected $send_message_url = &#x27;https://api.weixin.qq.com/cgi-bin/message/custom/send?access_token=&#x27;; // 发送消息给用户，用于用户联系客服时自动回复，不让微信服务器自动转发    public function __construct(Request $request = null)    &#123;        parent::__construct($request);        $this-&gt;Token = config(&#x27;site.wechatKefuToken&#x27;);        $this-&gt;EncodingAESKey = config(&#x27;site.wechatKefuEncodingAESKey&#x27;);        $wechat = new WechatLibrary(&#x27;wxMiniProgram&#x27;);        $this-&gt;app = $wechat-&gt;getApp();    &#125;    /**     * 微信小程序客服对接、处理消息回复     */    public function index()&#123;        if (isset($_GET[&#x27;echostr&#x27;]))            $this-&gt;valid();        else            $this-&gt;responseMsg();    &#125;    // 验证token时使用 配置小程序后台-&gt;开发-&gt;开发管理-&gt;开发设置-&gt;消息推送    private function valid()&#123;        $echoStr = $_GET[&quot;echostr&quot;];        if($this-&gt;checkSignature())&#123;            header(&#x27;content-type:text&#x27;);            echo $echoStr; // 成功            exit;        &#125;else&#123;            exit(&#x27;fail! &#x27;.$echoStr.&#x27;+++&#x27;.$this-&gt;Token); // 失败        &#125;    &#125;    // 配置小程序-&gt;消息推送-&gt;token验证时启用    private function checkSignature()&#123;        $signature = $_GET[&quot;signature&quot;];        $timestamp = $_GET[&quot;timestamp&quot;];        $nonce = $_GET[&quot;nonce&quot;];        $tmpArr = array($this-&gt;Token, $timestamp, $nonce);        sort($tmpArr, SORT_STRING);        $tmpStr = implode( $tmpArr );        $tmpStr = sha1( $tmpStr );        if($tmpStr == $signature)            return true;        else            return false;    &#125;    // 发送消息    private function responseMsg()&#123;        $postStr = file_get_contents(&#x27;php://input&#x27;);        if(empty($postStr) &amp;&amp; !is_string($postStr))&#123;            echo &quot;&quot;;            exit;        &#125;        //禁止引用外部xml实体        //libxml_disable_entity_loader(true);        //$postObj = simplexml_load_string($postStr, &#x27;SimpleXMLElement&#x27;, LIBXML_NOCDATA);        $postArr =json_decode($postStr,true);        $fromUsername =$postArr[&#x27;FromUserName&#x27;]; //发送者openid        $toUserName =$postArr[&#x27;ToUserName&#x27;]; //小程序id        if(!empty($postArr[&#x27;MsgType&#x27;]) &amp;&amp;$postArr[&#x27;MsgType&#x27;] ==&#x27;text&#x27;)&#123;//文本消息            $textTpl =array(                &quot;ToUserName&quot;=&gt;$fromUsername,                &quot;FromUserName&quot;=&gt;$toUserName,                &quot;CreateTime&quot;=&gt;$_SERVER[&#x27;REQUEST_TIME&#x27;],                &quot;MsgType&quot;=&gt;&quot;transfer_customer_service&quot;,            );            exit(json_encode($textTpl));        &#125;elseif(!empty($postArr[&#x27;MsgType&#x27;]) &amp;&amp;$postArr[&#x27;MsgType&#x27;] ==&#x27;image&#x27;)&#123;//图文消息            $textTpl =array(                &quot;ToUserName&quot;=&gt;$fromUsername,                &quot;FromUserName&quot;=&gt;$toUserName,                &quot;CreateTime&quot;=&gt;$_SERVER[&#x27;REQUEST_TIME&#x27;],                &quot;MsgType&quot;=&gt;&quot;transfer_customer_service&quot;,            );            exit(json_encode($textTpl));        &#125;elseif($postArr[&#x27;MsgType&#x27;] ==&#x27;event&#x27; &amp;&amp;$postArr[&#x27;Event&#x27;]==&#x27;user_enter_tempsession&#x27;)&#123;//进入客服动作            $content =&#x27;您好，有什么能帮助你?&#x27;;            $data=array(                &quot;touser&quot;=&gt;$fromUsername,                &quot;msgtype&quot;=&gt;&quot;text&quot;,                &quot;text&quot;=&gt;array(&quot;content&quot;=&gt;$content)            );            $json =json_encode($data,JSON_UNESCAPED_UNICODE);            $this-&gt;requestAPI($json);        &#125;else            exit(&#x27;Error,未知类型会话&#x27;);    &#125;    // 发送消息到指定    private function requestAPI($json)&#123;        $access_token = $this-&gt;get_accessToken();        $this-&gt;send_message_url = $this-&gt;send_message_url.$access_token; // 发送消息  POST发送https请求客服接口api        //以&#x27;json&#x27;格式发送post的https请求        $curl = curl_init();        curl_setopt($curl, CURLOPT_URL, $this-&gt;send_message_url);        curl_setopt($curl, CURLOPT_POST, 1); // 发送一个常规的Post请求        curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, FALSE);        curl_setopt($curl, CURLOPT_SSL_VERIFYHOST, FALSE);        if (!empty($json))            curl_setopt($curl, CURLOPT_POSTFIELDS,$json);        curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);        //curl_setopt($curl, CURLOPT_HTTPHEADER, $headers );        $output = curl_exec($curl);        if (curl_errno($curl))            echo &#x27;Errno&#x27;.curl_error($curl);//捕抓异常        curl_close($curl);        if($output == 0) &#123;            echo &#x27;success&#x27;;            exit;        &#125;    &#125;    // 调用微信api，获取access_token，有效期7200s    private function get_accessToken()&#123;        $url = $this-&gt;get_accessToken_url.&#x27;&amp;appid=&#x27;.$this-&gt;app-&gt;config[&#x27;app_id&#x27;].&#x27;&amp;secret=&#x27;.$this-&gt;app-&gt;config[&#x27;secret&#x27;]; //替换成自己的小程序id和secret        @$weixin = file_get_contents($url);        @$jsondecode = json_decode($weixin);        @$array = get_object_vars($jsondecode);        $token = $array[&#x27;access_token&#x27;];        return $token;    &#125;&#125;\n\n\n\n参考资料：\n\n消息推送|token 验证(官方)\nbutton|小程序按钮(官方)\n客服消息使用指南|整体介绍(官方)\n\n\n客服消息|开发文档(官方)\n仅回复模板消息，非在线聊天|csdn 微信小程序【客服消息】功能开发\n前端button设置|简书 微信小程序之在线客服（即时聊天）\n\n","categories":["微信"],"tags":["微信"]},{"title":"数据库索引 为空重复 报错","url":"/2021/03/17/%E6%8D%AE%E5%BA%93%E7%B4%A2%E5%BC%95-%E4%B8%BA%E7%A9%BA%E9%87%8D%E5%A4%8D-%E6%8A%A5%E9%94%99/","content":"框架：ci2.0 集合了cms数据库：mysql用户表引擎为MyISAM,邮箱为唯一索引\n问题：用户注册时，不要求填写邮箱，但是在数据库设计时，将邮箱设计为唯一索引导致第一个用户注册成功后，没有填写邮箱。第二个用户注册时，数据库则因为已经有一个邮箱值为空导致冲突。系统报错： \nuplicate entry &#39;&#39; for key &#39;email&#39;\n解决：导致当有一个用户没填写邮箱信息时，新用户就无法注册  解决办法\n\n将数据库引擎更换为InnoDB,Innodb支持多个唯一值为null的索引，并将邮箱默认值改为null\n【不推荐】取消邮箱的唯一索引\n\n\n参考资料:\n\nmysql唯一索引能为空吗_mysql 允许在唯一索引的字段中出现多个null值\n\n","categories":["MySql"]},{"title":"浏览器报ERR_PROXY_CONNECTION_FAILED","url":"/2021/03/30/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%8A%A5ERR-PROXY-CONNECTION-FAILED/","content":"问题使用微信开发工具调试时，突然发现 url 访问报错，复制链接到浏览器却可以正常访问，查看报错信息\n\nERR_PROXY_CONNECTION_FAILED\n\n解决这是因为修改了系统访问代理导致的，只需要修改回来就可以了\n\n因为大多数浏览器都是基于ie的，所以打开IE浏览器，点击internet选项，进入页面。\n\n弹出页面点击连接。\n\n然后打开局域网设置。\n\n使用代理服务器的勾是勾上的，这里将它去掉。\n\n然后重启浏览器，再次打开网页就可以了。\n\n\n","categories":["杂谈"]},{"title":"火狐账号同步看不到其他设备","url":"/2021/06/30/%E7%81%AB%E7%8B%90%E8%B4%A6%E5%8F%B7%E5%90%8C%E6%AD%A5%E7%9C%8B%E4%B8%8D%E5%88%B0%E5%85%B6%E4%BB%96%E8%AE%BE%E5%A4%87/","content":"问题最近使用另一台电脑办公，发现登录了账号后，怎么也不能同步浏览器书签和设置，就连【登录过的其他设备也看不到】\n解决原因：国内火狐用户账号数据是保存在国内服务器而我的账号数据，不知道为啥保存在了国外服务器\n正是数据存放地不同，导致无法同步数据。\n只需要访问国外服务器即可解决\n\n外服：https://accounts.firefox.com\n国服：https://accounts.firefox.com.cn\n\n\n完\n","categories":["杂谈"]},{"title":"简洁的summernote富文本编辑器","url":"/2021/03/26/%E7%AE%80%E6%B4%81%E7%9A%84summernote%E5%AF%8C%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/","content":"\nsummernote官网\n\nsummernote是我见过最简洁、简单的富文本编辑器，使用也很简单\n&lt;html&gt;&lt;head&gt;    &lt;script type=&quot;text/javascript&quot; src=&quot;https://cdn.bootcdn.net/ajax/libs/jquery/3.6.0/jquery.min.js&quot;&gt;&lt;/script&gt;    &lt;link href=&quot;https://cdn.bootcdn.net/ajax/libs/twitter-bootstrap/3.3.5/css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&gt;    &lt;script src=&quot;https://cdn.bootcdn.net/ajax/libs/twitter-bootstrap/3.3.5/js/bootstrap.min.js&quot;&gt;&lt;/script&gt;  \t&lt;!-- 样式文件 --&gt;    &lt;link href=&quot;https://cdn.jsdelivr.net/npm/summernote@0.8.18/dist/summernote.min.css&quot; rel=&quot;stylesheet&quot;&gt;  \t&lt;!-- 内核文件 --&gt;    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/summernote@0.8.18/dist/summernote.min.js&quot;&gt;&lt;/script&gt;  \t&lt;!-- 语言文件 --&gt;    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/summernote@0.8.18/dist/lang/summernote-zh-CN.min.js&quot;&gt;&lt;/script&gt;  &lt;/head&gt;&lt;body&gt;  &lt;div id=&quot;summernote&quot;&gt;&lt;p&gt;Hello Summernote&lt;/p&gt;&lt;/div&gt;  &lt;script&gt;    $(document).ready(function() &#123;        $(&#x27;#summernote&#x27;).summernote(&#123;\t\t\tlang: &#x27;zh-CN&#x27;,\t\t\theight: 300,\t\t\tcodemirror: &#123;\t\t\t\tmode: &#x27;text/html&#x27;,\t\t\t\thtmlMode: true,\t\t\t\tlineNumbers: true,\t\t\t\ttheme: &#x27;monokai&#x27;\t\t\t&#125;    \t&#125;)    &#125;);  &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;\n\n上面这段代码皆引用自cdn,cdn.jsdelivr.net的也速度不错。\n\n\n\n参考资料：\n\n最简洁的富文本编辑器\nsummernote官网\nsummernote 富文本编辑器上传本地图片\nsummernote禁止图片视频上传\n\n"},{"title":"获取微信公众号配置wxconfig以及签名","url":"/2021/05/28/%E8%8E%B7%E5%8F%96%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E9%85%8D%E7%BD%AEwxconfig%E4%BB%A5%E5%8F%8A%E7%AD%BE%E5%90%8Dsignature/","content":"起因某个商城小程序需要一个功能，扫二维码后跳到一个公众号H5页面，再从H5页面唤起小程序并传递参数。\n\n之所以这样做，是因为早期小程序并没有开发完成，但是用户商品的二维码已经出来了，因此采用此折中办法\n\n\n微信公众号H5页面跳转微信小程序\n\n微信公众号签名获取步骤\n使用APPID和APPSecret获取access_token；\n使用access_token获取jsapi_ticket ；\n用时间戳、随机数、jsapi_ticket和要访问的url按照签名算法拼接字符串；\n对第三步的字符串进行SHA1加密，得到签名。\n\n//tp5,easywxchat        $wxOfficialAccount = new \\addons\\shopro\\library\\Wechat(&#x27;wxOfficialAccount&#x27;);        $app = $wxOfficialAccount-&gt;getApp();        $app-&gt;jssdk-&gt;setUrl($url);        $config = $app-&gt;jssdk-&gt;buildConfig(array(&#x27;updateAppMessageShareData&#x27;, &#x27;updateTimelineShareData&#x27;), true,false,false);        $this-&gt;success(&#x27;获取配置信息&#x27;,$config);\n\n\n参考资料:\n\n微信公众号H5页面跳转微信小程序\n微信JS-SDK获取signature签名以及config配置\neasyWeChat手册\n微信JS-SDK获取signature签名以及config配置\n众平台ip白名单设置获取access_token\n于微信公众号开发的Token验证失败该如何解决？\n\n","categories":["微信"],"tags":["wxconfig"]},{"title":"解决Firefox显示“已阻止载入混合活动内容”的方法","url":"/2021/03/07/%E8%A7%A3%E5%86%B3Firefox%E6%98%BE%E7%A4%BA%E2%80%9C%E5%B7%B2%E9%98%BB%E6%AD%A2%E8%BD%BD%E5%85%A5%E6%B7%B7%E5%90%88%E6%B4%BB%E5%8A%A8%E5%86%85%E5%AE%B9%E2%80%9D%E7%9A%84%E6%96%B9%E6%B3%95/","content":"\n来源：解决Firefox显示“已阻止载入混合活动内容”的方法作者：Jacey\n\n今天把项目放到服务器上了，调试的时候出现“已阻止载入混合活动内容……”的报错：\n解决方法如下：\n\n方法1：让Firefox暂时不阻止\n打开新标签页，在地址栏输入 about:config，进入配置页面。搜索 security.mixed_content.block_active_content，将true改为false。\n\n\n\n\n方法2：避免在HTTPS页面中包含HTTP的内容。\n\n 第1种方法很不现实，因为我们不能要求所有用户去改这项配置。 我们可以看看是不是从https提交内容到http的原因，如果是的话，把请求的URL改成https的就可以了。\n 经排查，发现访问URL的时候确实是http的，将其改成https，不再报错了。\n\n","categories":["杂谈"]},{"title":"错误：只允许在 C99 模式下使用‘for’循环初始化声明","url":"/2021/08/07/%E9%94%99%E8%AF%AF%EF%BC%9A%E5%8F%AA%E5%85%81%E8%AE%B8%E5%9C%A8-C99-%E6%A8%A1%E5%BC%8F%E4%B8%8B%E4%BD%BF%E7%94%A8%E2%80%98for%E2%80%99%E5%BE%AA%E7%8E%AF%E5%88%9D%E5%A7%8B%E5%8C%96%E5%A3%B0%E6%98%8E/","content":"前言最近在linux里源码编译安装软件时，make后提示错误：只允许在 C99 模式下使用‘for’循环初始化声明\n原因我安装的swoole软件,在Linux下编译器为gcc，而gcc的标准有很多，c99就是其中之一，而这里的错误，就是编译器没有使用c99标准编译导致的。\n解决make CFLAGS=-std=c99使用上述指令编译即可。\n\nCFLAGS 表示用于 C 编译器的选项\n-std=c99 表示使用 c99 标准\n\n如果提示了错误：位置的类型名&#39;xxxx&#39;这时候不要执行nake clean，直接make就好\n\n参考资料：\n\n解决“错误：只允许在 C99 模式下使用‘for’循环初始化声明”问题_qq_31664947的博客-程序员宅基地\n错误：只允许在 C99 模式下使用‘for’循环初始化声明\n\n","categories":["linux"],"tags":["linux"]},{"title":"除非Windows Activation Service（WAS）和万维网发布服务（W3SVC）均处于运行状态，否则无法启动网站。目前，这两项服务均处于停止状态。","url":"/2021/03/07/%E9%99%A4%E9%9D%9EWindows-Activation-Service%EF%BC%88WAS%EF%BC%89%E5%92%8C%E4%B8%87%E7%BB%B4%E7%BD%91%E5%8F%91%E5%B8%83%E6%9C%8D%E5%8A%A1%EF%BC%88W3SVC%EF%BC%89%E5%9D%87%E5%A4%84%E4%BA%8E%E8%BF%90%E8%A1%8C%E7%8A%B6%E6%80%81%EF%BC%8C%E5%90%A6%E5%88%99%E6%97%A0%E6%B3%95%E5%90%AF%E5%8A%A8%E7%BD%91%E7%AB%99%E3%80%82%E7%9B%AE%E5%89%8D%EF%BC%8C%E8%BF%99%E4%B8%A4%E9%A1%B9%E6%9C%8D%E5%8A%A1%E5%9D%87%E5%A4%84%E4%BA%8E%E5%81%9C%E6%AD%A2%E7%8A%B6%E6%80%81%E3%80%82/","content":"问题如题，在本地处理一个iis项目时，遇到\n\n除非Windows Activation Service（WAS）和万维网发布服务（W3SVC）均处于运行状态，否则无法启动网站。目前，这两项服务均处于停止状态。\n\n\n解决在WINDOWS服务管理里 启动 \n\nWindows Process Activation Service\nWorld Wide Web Publishing Service\n\n可能遇到的问题\n没有IIS\n\n见Windows无法启动 Windows Process Activation Service 服务： 系统找不到指定的路径\n\n\n错误1068：依赖服务或组无法启动。\n\n右键 -&gt; 属性 -&gt; 依存关系启动所有列出来的服务\n\n\n错误3：系统找不到指定的路径。\n\n启动 Windows Process Activation Service出现提示：Windows 无法启动Windows Process Activation Service服务（位于本地计算机上）。依次尝试以下方法：\n\n在Windows功能中，找到并开启Windows Process Activation Service内所有功能 重启。\n没有对应的文件夹 手动创建 c:\\inetpub\\temp\\apppools 文件夹\n清理注册表\n\n\n\n\n\n相关资料：\n\n除非 Windows Activation Service (WAS)和万维网发布服务(W3SVC)均处于运行状态，否则无法启动网站。IIS 7- 除非 Windows Activation Service (WAS)和万维网发布服务(W3SVC)均处于运行状态，否则无法启动网站。IIS 7\nWindows无法启动 Windows Process Activation Service 服务： 系统找不到指定的路径\nWindows 10更新后Windows Process Activation Service服务不能启动 \nWindows Process Activation Service启动失败，显示系统找不到指定路径\nWindows无法启动 Windows Process Activation Service 服务： 系统找不到指定的路径\n\n","categories":["IIS"]}]